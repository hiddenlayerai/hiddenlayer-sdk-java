/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.hiddenlayer.sdk.rest.models.LocationRelationship;
import com.hiddenlayer.sdk.rest.models.LogicalLocation;
import com.hiddenlayer.sdk.rest.models.Message;
import com.hiddenlayer.sdk.rest.models.PhysicalLocation;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import com.hiddenlayer.sdk.rest.models.Region;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A location within a programming artifact.
 */
@JsonPropertyOrder({
  Location.JSON_PROPERTY_ID,
  Location.JSON_PROPERTY_PHYSICAL_LOCATION,
  Location.JSON_PROPERTY_LOGICAL_LOCATIONS,
  Location.JSON_PROPERTY_MESSAGE,
  Location.JSON_PROPERTY_ANNOTATIONS,
  Location.JSON_PROPERTY_RELATIONSHIPS,
  Location.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-06T16:41:22.054858Z[GMT]", comments = "Generator version: 7.6.0")
public class Location {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id = -1;

  public static final String JSON_PROPERTY_PHYSICAL_LOCATION = "physicalLocation";
  private JsonNullable<PhysicalLocation> physicalLocation = JsonNullable.<PhysicalLocation>undefined();

  public static final String JSON_PROPERTY_LOGICAL_LOCATIONS = "logicalLocations";
  private Set<LogicalLocation> logicalLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private JsonNullable<Message> message = JsonNullable.<Message>undefined();

  public static final String JSON_PROPERTY_ANNOTATIONS = "annotations";
  private Set<Region> annotations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_RELATIONSHIPS = "relationships";
  private Set<LocationRelationship> relationships = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Location() { 
  }

  public Location id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Value that distinguishes this location from all other locations within a single result object.
   * minimum: -1
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Location physicalLocation(PhysicalLocation physicalLocation) {
    this.physicalLocation = JsonNullable.<PhysicalLocation>of(physicalLocation);
    return this;
  }

   /**
   * Get physicalLocation
   * @return physicalLocation
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public PhysicalLocation getPhysicalLocation() {
        return physicalLocation.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PHYSICAL_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PhysicalLocation> getPhysicalLocation_JsonNullable() {
    return physicalLocation;
  }
  
  @JsonProperty(JSON_PROPERTY_PHYSICAL_LOCATION)
  public void setPhysicalLocation_JsonNullable(JsonNullable<PhysicalLocation> physicalLocation) {
    this.physicalLocation = physicalLocation;
  }

  public void setPhysicalLocation(PhysicalLocation physicalLocation) {
    this.physicalLocation = JsonNullable.<PhysicalLocation>of(physicalLocation);
  }


  public Location logicalLocations(Set<LogicalLocation> logicalLocations) {
    this.logicalLocations = logicalLocations;
    return this;
  }

  public Location addLogicalLocationsItem(LogicalLocation logicalLocationsItem) {
    if (this.logicalLocations == null) {
      this.logicalLocations = new LinkedHashSet<>();
    }
    this.logicalLocations.add(logicalLocationsItem);
    return this;
  }

   /**
   * The logical locations associated with the result.
   * @return logicalLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LogicalLocation> getLogicalLocations() {
    return logicalLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogicalLocations(Set<LogicalLocation> logicalLocations) {
    this.logicalLocations = logicalLocations;
  }


  public Location message(Message message) {
    this.message = JsonNullable.<Message>of(message);
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Message getMessage() {
        return message.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Message> getMessage_JsonNullable() {
    return message;
  }
  
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  public void setMessage_JsonNullable(JsonNullable<Message> message) {
    this.message = message;
  }

  public void setMessage(Message message) {
    this.message = JsonNullable.<Message>of(message);
  }


  public Location annotations(Set<Region> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Location addAnnotationsItem(Region annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new LinkedHashSet<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

   /**
   * A set of regions relevant to the location.
   * @return annotations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Region> getAnnotations() {
    return annotations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnotations(Set<Region> annotations) {
    this.annotations = annotations;
  }


  public Location relationships(Set<LocationRelationship> relationships) {
    this.relationships = relationships;
    return this;
  }

  public Location addRelationshipsItem(LocationRelationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new LinkedHashSet<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

   /**
   * An array of objects that describe relationships between this location and others.
   * @return relationships
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LocationRelationship> getRelationships() {
    return relationships;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelationships(Set<LocationRelationship> relationships) {
    this.relationships = relationships;
  }


  public Location properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this location object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.id, location.id) &&
        equalsNullable(this.physicalLocation, location.physicalLocation) &&
        Objects.equals(this.logicalLocations, location.logicalLocations) &&
        equalsNullable(this.message, location.message) &&
        Objects.equals(this.annotations, location.annotations) &&
        Objects.equals(this.relationships, location.relationships) &&
        Objects.equals(this.properties, location.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hashCodeNullable(physicalLocation), logicalLocations, hashCodeNullable(message), annotations, relationships, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    physicalLocation: ").append(toIndentedString(physicalLocation)).append("\n");
    sb.append("    logicalLocations: ").append(toIndentedString(logicalLocations)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `physicalLocation` to the URL query string
    if (getPhysicalLocation() != null) {
      joiner.add(getPhysicalLocation().toUrlQueryString(prefix + "physicalLocation" + suffix));
    }

    // add `logicalLocations` to the URL query string
    if (getLogicalLocations() != null) {
      int i = 0;
      for (LogicalLocation _item : getLogicalLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%slogicalLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      joiner.add(getMessage().toUrlQueryString(prefix + "message" + suffix));
    }

    // add `annotations` to the URL query string
    if (getAnnotations() != null) {
      int i = 0;
      for (Region _item : getAnnotations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sannotations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `relationships` to the URL query string
    if (getRelationships() != null) {
      int i = 0;
      for (LocationRelationship _item : getRelationships()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%srelationships%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

