/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SensorSORQueryFilter
 */
@JsonPropertyOrder({
  SensorSORQueryFilter.JSON_PROPERTY_PLAINTEXT_NAME,
  SensorSORQueryFilter.JSON_PROPERTY_ACTIVE,
  SensorSORQueryFilter.JSON_PROPERTY_VERSION,
  SensorSORQueryFilter.JSON_PROPERTY_CREATED_AT_START,
  SensorSORQueryFilter.JSON_PROPERTY_CREATED_AT_STOP,
  SensorSORQueryFilter.JSON_PROPERTY_SOURCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-17T20:22:10.182839Z[GMT]", comments = "Generator version: 7.6.0")
public class SensorSORQueryFilter {
  public static final String JSON_PROPERTY_PLAINTEXT_NAME = "plaintext_name";
  private String plaintextName;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Integer version;

  public static final String JSON_PROPERTY_CREATED_AT_START = "created_at_start";
  private OffsetDateTime createdAtStart;

  public static final String JSON_PROPERTY_CREATED_AT_STOP = "created_at_stop";
  private OffsetDateTime createdAtStop;

  /**
   * Gets or Sets source
   */
  public enum SourceEnum {
    ADHOC("adhoc");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  private SourceEnum source;

  public SensorSORQueryFilter() { 
  }

  public SensorSORQueryFilter plaintextName(String plaintextName) {
    this.plaintextName = plaintextName;
    return this;
  }

   /**
   * Get plaintextName
   * @return plaintextName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAINTEXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlaintextName() {
    return plaintextName;
  }


  @JsonProperty(JSON_PROPERTY_PLAINTEXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlaintextName(String plaintextName) {
    this.plaintextName = plaintextName;
  }


  public SensorSORQueryFilter active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public SensorSORQueryFilter version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Integer version) {
    this.version = version;
  }


  public SensorSORQueryFilter createdAtStart(OffsetDateTime createdAtStart) {
    this.createdAtStart = createdAtStart;
    return this;
  }

   /**
   * Get createdAtStart
   * @return createdAtStart
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAtStart() {
    return createdAtStart;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAtStart(OffsetDateTime createdAtStart) {
    this.createdAtStart = createdAtStart;
  }


  public SensorSORQueryFilter createdAtStop(OffsetDateTime createdAtStop) {
    this.createdAtStop = createdAtStop;
    return this;
  }

   /**
   * Get createdAtStop
   * @return createdAtStop
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAtStop() {
    return createdAtStop;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAtStop(OffsetDateTime createdAtStop) {
    this.createdAtStop = createdAtStop;
  }


  public SensorSORQueryFilter source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceEnum getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(SourceEnum source) {
    this.source = source;
  }


  /**
   * Return true if this SensorSORQueryFilter object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorSORQueryFilter sensorSORQueryFilter = (SensorSORQueryFilter) o;
    return Objects.equals(this.plaintextName, sensorSORQueryFilter.plaintextName) &&
        Objects.equals(this.active, sensorSORQueryFilter.active) &&
        Objects.equals(this.version, sensorSORQueryFilter.version) &&
        Objects.equals(this.createdAtStart, sensorSORQueryFilter.createdAtStart) &&
        Objects.equals(this.createdAtStop, sensorSORQueryFilter.createdAtStop) &&
        Objects.equals(this.source, sensorSORQueryFilter.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plaintextName, active, version, createdAtStart, createdAtStop, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorSORQueryFilter {\n");
    sb.append("    plaintextName: ").append(toIndentedString(plaintextName)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAtStart: ").append(toIndentedString(createdAtStart)).append("\n");
    sb.append("    createdAtStop: ").append(toIndentedString(createdAtStop)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `plaintext_name` to the URL query string
    if (getPlaintextName() != null) {
      joiner.add(String.format("%splaintext_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlaintextName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      joiner.add(String.format("%sactive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActive()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `created_at_start` to the URL query string
    if (getCreatedAtStart() != null) {
      joiner.add(String.format("%screated_at_start%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAtStart()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `created_at_stop` to the URL query string
    if (getCreatedAtStop() != null) {
      joiner.add(String.format("%screated_at_stop%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAtStop()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `source` to the URL query string
    if (getSource() != null) {
      joiner.add(String.format("%ssource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

