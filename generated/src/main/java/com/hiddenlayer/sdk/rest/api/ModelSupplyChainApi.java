/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hiddenlayer.sdk.rest.api;

import com.hiddenlayer.sdk.rest.ApiClient;
import com.hiddenlayer.sdk.rest.ApiException;
import com.hiddenlayer.sdk.rest.ApiResponse;
import com.hiddenlayer.sdk.rest.Pair;

import com.hiddenlayer.sdk.rest.models.BeginMultiFileUpload200Response;
import com.hiddenlayer.sdk.rest.models.BeginMultipartFileUpload200Response;
import com.hiddenlayer.sdk.rest.models.GetCondensedModelScanReports200Response;
import com.hiddenlayer.sdk.rest.models.MultiFileUploadRequestV3;
import com.hiddenlayer.sdk.rest.models.NotifyModelScanCompleted200Response;
import java.time.OffsetDateTime;
import com.hiddenlayer.sdk.rest.models.ProblemDetails;
import com.hiddenlayer.sdk.rest.models.Sarif210;
import com.hiddenlayer.sdk.rest.models.ScanCreateRequest;
import com.hiddenlayer.sdk.rest.models.ScanJob;
import com.hiddenlayer.sdk.rest.models.ScanReportV3;
import com.hiddenlayer.sdk.rest.models.ScanResultsMapV3;
import java.util.UUID;
import com.hiddenlayer.sdk.rest.models.ValidationErrorModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-06T16:41:22.054858Z[GMT]", comments = "Generator version: 7.6.0")
public class ModelSupplyChainApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ModelSupplyChainApi() {
    this(new ApiClient());
  }

  public ModelSupplyChainApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Start V3 Upload
   * 
   * @param multiFileUploadRequestV3 Request body for create (required)
   * @return BeginMultiFileUpload200Response
   * @throws ApiException if fails to make API call
   */
  public BeginMultiFileUpload200Response beginMultiFileUpload(MultiFileUploadRequestV3 multiFileUploadRequestV3) throws ApiException {
    ApiResponse<BeginMultiFileUpload200Response> localVarResponse = beginMultiFileUploadWithHttpInfo(multiFileUploadRequestV3);
    return localVarResponse.getData();
  }

  /**
   * Start V3 Upload
   * 
   * @param multiFileUploadRequestV3 Request body for create (required)
   * @return ApiResponse&lt;BeginMultiFileUpload200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BeginMultiFileUpload200Response> beginMultiFileUploadWithHttpInfo(MultiFileUploadRequestV3 multiFileUploadRequestV3) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = beginMultiFileUploadRequestBuilder(multiFileUploadRequestV3);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("beginMultiFileUpload", localVarResponse);
        }
        return new ApiResponse<BeginMultiFileUpload200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BeginMultiFileUpload200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder beginMultiFileUploadRequestBuilder(MultiFileUploadRequestV3 multiFileUploadRequestV3) throws ApiException {
    // verify the required parameter 'multiFileUploadRequestV3' is set
    if (multiFileUploadRequestV3 == null) {
      throw new ApiException(400, "Missing the required parameter 'multiFileUploadRequestV3' when calling beginMultiFileUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/upload";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(multiFileUploadRequestV3);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Add file to V3 Upload
   * 
   * @param fileContentLength Added file size in bytes (required)
   * @param fileName Added file name (required)
   * @param scanId  (required)
   * @return BeginMultipartFileUpload200Response
   * @throws ApiException if fails to make API call
   */
  public BeginMultipartFileUpload200Response beginMultipartFileUpload(Integer fileContentLength, String fileName, UUID scanId) throws ApiException {
    ApiResponse<BeginMultipartFileUpload200Response> localVarResponse = beginMultipartFileUploadWithHttpInfo(fileContentLength, fileName, scanId);
    return localVarResponse.getData();
  }

  /**
   * Add file to V3 Upload
   * 
   * @param fileContentLength Added file size in bytes (required)
   * @param fileName Added file name (required)
   * @param scanId  (required)
   * @return ApiResponse&lt;BeginMultipartFileUpload200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BeginMultipartFileUpload200Response> beginMultipartFileUploadWithHttpInfo(Integer fileContentLength, String fileName, UUID scanId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = beginMultipartFileUploadRequestBuilder(fileContentLength, fileName, scanId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("beginMultipartFileUpload", localVarResponse);
        }
        return new ApiResponse<BeginMultipartFileUpload200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BeginMultipartFileUpload200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder beginMultipartFileUploadRequestBuilder(Integer fileContentLength, String fileName, UUID scanId) throws ApiException {
    // verify the required parameter 'fileContentLength' is set
    if (fileContentLength == null) {
      throw new ApiException(400, "Missing the required parameter 'fileContentLength' when calling beginMultipartFileUpload");
    }
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling beginMultipartFileUpload");
    }
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling beginMultipartFileUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/upload/{scan_id}/file"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (fileContentLength != null) {
      localVarRequestBuilder.header("file-content-length", fileContentLength.toString());
    }
    if (fileName != null) {
      localVarRequestBuilder.header("file-name", fileName.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Indicate All files are uploaded and start the scan
   * 
   * @param scanId  (required)
   * @return BeginMultiFileUpload200Response
   * @throws ApiException if fails to make API call
   */
  public BeginMultiFileUpload200Response completeMultiFileUpload(UUID scanId) throws ApiException {
    ApiResponse<BeginMultiFileUpload200Response> localVarResponse = completeMultiFileUploadWithHttpInfo(scanId);
    return localVarResponse.getData();
  }

  /**
   * Indicate All files are uploaded and start the scan
   * 
   * @param scanId  (required)
   * @return ApiResponse&lt;BeginMultiFileUpload200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BeginMultiFileUpload200Response> completeMultiFileUploadWithHttpInfo(UUID scanId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = completeMultiFileUploadRequestBuilder(scanId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("completeMultiFileUpload", localVarResponse);
        }
        return new ApiResponse<BeginMultiFileUpload200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BeginMultiFileUpload200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder completeMultiFileUploadRequestBuilder(UUID scanId) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling completeMultiFileUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/upload/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Indicate that upload is completed for {file_id}
   * 
   * @param scanId  (required)
   * @param fileId  (required)
   * @return BeginMultiFileUpload200Response
   * @throws ApiException if fails to make API call
   */
  public BeginMultiFileUpload200Response completeMultipartFileUpload(UUID scanId, UUID fileId) throws ApiException {
    ApiResponse<BeginMultiFileUpload200Response> localVarResponse = completeMultipartFileUploadWithHttpInfo(scanId, fileId);
    return localVarResponse.getData();
  }

  /**
   * Indicate that upload is completed for {file_id}
   * 
   * @param scanId  (required)
   * @param fileId  (required)
   * @return ApiResponse&lt;BeginMultiFileUpload200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BeginMultiFileUpload200Response> completeMultipartFileUploadWithHttpInfo(UUID scanId, UUID fileId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = completeMultipartFileUploadRequestBuilder(scanId, fileId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("completeMultipartFileUpload", localVarResponse);
        }
        return new ApiResponse<BeginMultiFileUpload200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BeginMultiFileUpload200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder completeMultipartFileUploadRequestBuilder(UUID scanId, UUID fileId) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling completeMultipartFileUpload");
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling completeMultipartFileUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/upload/{scan_id}/file/{file_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()))
        .replace("{file_id}", ApiClient.urlEncode(fileId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Request a Model Scan Job
   * 
   * @param scanJob Request body for create scan request (required)
   * @throws ApiException if fails to make API call
   */
  public void createScanJob(ScanJob scanJob) throws ApiException {
    createScanJobWithHttpInfo(scanJob);
  }

  /**
   * Request a Model Scan Job
   * 
   * @param scanJob Request body for create scan request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createScanJobWithHttpInfo(ScanJob scanJob) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createScanJobRequestBuilder(scanJob);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createScanJob", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createScanJobRequestBuilder(ScanJob scanJob) throws ApiException {
    // verify the required parameter 'scanJob' is set
    if (scanJob == null) {
      throw new ApiException(400, "Missing the required parameter 'scanJob' when calling createScanJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/jobs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json; charset=utf-8");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(scanJob);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get condensed reports for a Model Scan
   * 
   * @param modelVersionIds Model Version ID (optional)
   * @param modelIds Model ID (optional)
   * @param startTime Start Time (optional)
   * @param endTime End Time (optional)
   * @param severity Severities (optional)
   * @param status Statuses (optional)
   * @param limit  (optional, default to 25)
   * @param offset  (optional, default to 0)
   * @param sort allow sorting by status, severity or created at, ascending (+) or the default descending (-) (optional, default to -start_time)
   * @param latestPerModelVersionOnly only return latest result per model version (optional, default to false)
   * @return GetCondensedModelScanReports200Response
   * @throws ApiException if fails to make API call
   */
  public GetCondensedModelScanReports200Response getCondensedModelScanReports(List<String> modelVersionIds, List<String> modelIds, OffsetDateTime startTime, OffsetDateTime endTime, List<String> severity, List<String> status, Integer limit, Integer offset, String sort, Boolean latestPerModelVersionOnly) throws ApiException {
    ApiResponse<GetCondensedModelScanReports200Response> localVarResponse = getCondensedModelScanReportsWithHttpInfo(modelVersionIds, modelIds, startTime, endTime, severity, status, limit, offset, sort, latestPerModelVersionOnly);
    return localVarResponse.getData();
  }

  /**
   * Get condensed reports for a Model Scan
   * 
   * @param modelVersionIds Model Version ID (optional)
   * @param modelIds Model ID (optional)
   * @param startTime Start Time (optional)
   * @param endTime End Time (optional)
   * @param severity Severities (optional)
   * @param status Statuses (optional)
   * @param limit  (optional, default to 25)
   * @param offset  (optional, default to 0)
   * @param sort allow sorting by status, severity or created at, ascending (+) or the default descending (-) (optional, default to -start_time)
   * @param latestPerModelVersionOnly only return latest result per model version (optional, default to false)
   * @return ApiResponse&lt;GetCondensedModelScanReports200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetCondensedModelScanReports200Response> getCondensedModelScanReportsWithHttpInfo(List<String> modelVersionIds, List<String> modelIds, OffsetDateTime startTime, OffsetDateTime endTime, List<String> severity, List<String> status, Integer limit, Integer offset, String sort, Boolean latestPerModelVersionOnly) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCondensedModelScanReportsRequestBuilder(modelVersionIds, modelIds, startTime, endTime, severity, status, limit, offset, sort, latestPerModelVersionOnly);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCondensedModelScanReports", localVarResponse);
        }
        return new ApiResponse<GetCondensedModelScanReports200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetCondensedModelScanReports200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCondensedModelScanReportsRequestBuilder(List<String> modelVersionIds, List<String> modelIds, OffsetDateTime startTime, OffsetDateTime endTime, List<String> severity, List<String> status, Integer limit, Integer offset, String sort, Boolean latestPerModelVersionOnly) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/results";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "model_version_ids";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "model_version_ids", modelVersionIds));
    localVarQueryParameterBaseName = "model_ids";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "model_ids", modelIds));
    localVarQueryParameterBaseName = "start_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_time", startTime));
    localVarQueryParameterBaseName = "end_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_time", endTime));
    localVarQueryParameterBaseName = "severity";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "severity", severity));
    localVarQueryParameterBaseName = "status";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "status", status));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "offset";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParameterBaseName = "latest_per_model_version_only";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latest_per_model_version_only", latestPerModelVersionOnly));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset=utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List all Model Scan Jobs
   * 
   * @return List&lt;ScanJob&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ScanJob> getScanJobs() throws ApiException {
    ApiResponse<List<ScanJob>> localVarResponse = getScanJobsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List all Model Scan Jobs
   * 
   * @return ApiResponse&lt;List&lt;ScanJob&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ScanJob>> getScanJobsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getScanJobsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getScanJobs", localVarResponse);
        }
        return new ApiResponse<List<ScanJob>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ScanJob>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getScanJobsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/jobs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json; charset=utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get Result of a Model Scan
   * 
   * @param scanId  (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @return ScanReportV3
   * @throws ApiException if fails to make API call
   */
  public ScanReportV3 getScanResults(UUID scanId, Boolean hasDetections) throws ApiException {
    ApiResponse<ScanReportV3> localVarResponse = getScanResultsWithHttpInfo(scanId, hasDetections);
    return localVarResponse.getData();
  }

  /**
   * Get Result of a Model Scan
   * 
   * @param scanId  (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @return ApiResponse&lt;ScanReportV3&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ScanReportV3> getScanResultsWithHttpInfo(UUID scanId, Boolean hasDetections) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getScanResultsRequestBuilder(scanId, hasDetections);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getScanResults", localVarResponse);
        }
        return new ApiResponse<ScanReportV3>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ScanReportV3>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getScanResultsRequestBuilder(UUID scanId, Boolean hasDetections) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling getScanResults");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/results/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "has_detections";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("has_detections", hasDetections));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset=utf-8, application/sarif+json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Model Scan Results
   * 
   * @param scanId  (optional)
   * @param cursor  (optional)
   * @param pageSize  (optional, default to 25)
   * @return List&lt;ScanResultsMapV3&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ScanResultsMapV3> getScanResults1(UUID scanId, String cursor, Integer pageSize) throws ApiException {
    ApiResponse<List<ScanResultsMapV3>> localVarResponse = getScanResults1WithHttpInfo(scanId, cursor, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Model Scan Results
   * 
   * @param scanId  (optional)
   * @param cursor  (optional)
   * @param pageSize  (optional, default to 25)
   * @return ApiResponse&lt;List&lt;ScanResultsMapV3&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ScanResultsMapV3>> getScanResults1WithHttpInfo(UUID scanId, String cursor, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getScanResults1RequestBuilder(scanId, cursor, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getScanResults1", localVarResponse);
        }
        return new ApiResponse<List<ScanResultsMapV3>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ScanResultsMapV3>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getScanResults1RequestBuilder(UUID scanId, String cursor, Integer pageSize) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/results/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "cursor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json; charset=utf-8");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Health check endpoint for Model Supply Chain Services
   * 
   * @throws ApiException if fails to make API call
   */
  public void modelscannerApiV3HealthCheck() throws ApiException {
    modelscannerApiV3HealthCheckWithHttpInfo();
  }

  /**
   * Health check endpoint for Model Supply Chain Services
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modelscannerApiV3HealthCheckWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelscannerApiV3HealthCheckRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modelscannerApiV3HealthCheck", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelscannerApiV3HealthCheckRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/health";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Readiness check endpoint for Model Supply Chain Services
   * 
   * @throws ApiException if fails to make API call
   */
  public void modelscannerApiV3ReadinessCheck() throws ApiException {
    modelscannerApiV3ReadinessCheckWithHttpInfo();
  }

  /**
   * Readiness check endpoint for Model Supply Chain Services
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modelscannerApiV3ReadinessCheckWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelscannerApiV3ReadinessCheckRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("modelscannerApiV3ReadinessCheck", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelscannerApiV3ReadinessCheckRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/readiness";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Indicate part (file or files) of a model scan has completed
   * 
   * @param scanId  (required)
   * @param scanReportV3 Request body for partial update (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @return NotifyModelScanCompleted200Response
   * @throws ApiException if fails to make API call
   */
  public NotifyModelScanCompleted200Response notifyModelScanCompleted(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    ApiResponse<NotifyModelScanCompleted200Response> localVarResponse = notifyModelScanCompletedWithHttpInfo(scanId, scanReportV3, hasDetections);
    return localVarResponse.getData();
  }

  /**
   * Indicate part (file or files) of a model scan has completed
   * 
   * @param scanId  (required)
   * @param scanReportV3 Request body for partial update (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @return ApiResponse&lt;NotifyModelScanCompleted200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<NotifyModelScanCompleted200Response> notifyModelScanCompletedWithHttpInfo(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = notifyModelScanCompletedRequestBuilder(scanId, scanReportV3, hasDetections);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("notifyModelScanCompleted", localVarResponse);
        }
        return new ApiResponse<NotifyModelScanCompleted200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<NotifyModelScanCompleted200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder notifyModelScanCompletedRequestBuilder(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling notifyModelScanCompleted");
    }
    // verify the required parameter 'scanReportV3' is set
    if (scanReportV3 == null) {
      throw new ApiException(400, "Missing the required parameter 'scanReportV3' when calling notifyModelScanCompleted");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/results/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "has_detections";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("has_detections", hasDetections));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(scanReportV3);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Indicate model scan has started
   * 
   * @param scanId  (required)
   * @param scanReportV3 Request body for create (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @throws ApiException if fails to make API call
   */
  public void notifyModelScanStarted(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    notifyModelScanStartedWithHttpInfo(scanId, scanReportV3, hasDetections);
  }

  /**
   * Indicate model scan has started
   * 
   * @param scanId  (required)
   * @param scanReportV3 Request body for create (required)
   * @param hasDetections Filter file_results to only those that have detections (and parents) (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> notifyModelScanStartedWithHttpInfo(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = notifyModelScanStartedRequestBuilder(scanId, scanReportV3, hasDetections);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("notifyModelScanStarted", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder notifyModelScanStartedRequestBuilder(UUID scanId, ScanReportV3 scanReportV3, Boolean hasDetections) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling notifyModelScanStarted");
    }
    // verify the required parameter 'scanReportV3' is set
    if (scanReportV3 == null) {
      throw new ApiException(400, "Missing the required parameter 'scanReportV3' when calling notifyModelScanStarted");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scan/v3/results/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "has_detections";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("has_detections", hasDetections));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(scanReportV3);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Engine Report Endpoint of Model Scan Results
   * 
   * @param scanId  (required)
   * @param scanCreateRequest Request body for reporting a scan of one or more file results (required)
   * @throws ApiException if fails to make API call
   */
  public void reportScanResults(UUID scanId, ScanCreateRequest scanCreateRequest) throws ApiException {
    reportScanResultsWithHttpInfo(scanId, scanCreateRequest);
  }

  /**
   * Engine Report Endpoint of Model Scan Results
   * 
   * @param scanId  (required)
   * @param scanCreateRequest Request body for reporting a scan of one or more file results (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportScanResultsWithHttpInfo(UUID scanId, ScanCreateRequest scanCreateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportScanResultsRequestBuilder(scanId, scanCreateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportScanResults", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportScanResultsRequestBuilder(UUID scanId, ScanCreateRequest scanCreateRequest) throws ApiException {
    // verify the required parameter 'scanId' is set
    if (scanId == null) {
      throw new ApiException(400, "Missing the required parameter 'scanId' when calling reportScanResults");
    }
    // verify the required parameter 'scanCreateRequest' is set
    if (scanCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'scanCreateRequest' when calling reportScanResults");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/scans/v3/reports/{scan_id}"
        .replace("{scan_id}", ApiClient.urlEncode(scanId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(scanCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
