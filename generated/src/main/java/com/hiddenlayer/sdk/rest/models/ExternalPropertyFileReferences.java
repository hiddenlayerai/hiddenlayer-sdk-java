/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.hiddenlayer.sdk.rest.models.ExternalPropertyFileReference;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * References to external property files that should be inlined with the content of a root log file.
 */
@JsonPropertyOrder({
  ExternalPropertyFileReferences.JSON_PROPERTY_CONVERSION,
  ExternalPropertyFileReferences.JSON_PROPERTY_GRAPHS,
  ExternalPropertyFileReferences.JSON_PROPERTY_EXTERNALIZED_PROPERTIES,
  ExternalPropertyFileReferences.JSON_PROPERTY_ARTIFACTS,
  ExternalPropertyFileReferences.JSON_PROPERTY_INVOCATIONS,
  ExternalPropertyFileReferences.JSON_PROPERTY_LOGICAL_LOCATIONS,
  ExternalPropertyFileReferences.JSON_PROPERTY_THREAD_FLOW_LOCATIONS,
  ExternalPropertyFileReferences.JSON_PROPERTY_RESULTS,
  ExternalPropertyFileReferences.JSON_PROPERTY_TAXONOMIES,
  ExternalPropertyFileReferences.JSON_PROPERTY_ADDRESSES,
  ExternalPropertyFileReferences.JSON_PROPERTY_DRIVER,
  ExternalPropertyFileReferences.JSON_PROPERTY_EXTENSIONS,
  ExternalPropertyFileReferences.JSON_PROPERTY_POLICIES,
  ExternalPropertyFileReferences.JSON_PROPERTY_TRANSLATIONS,
  ExternalPropertyFileReferences.JSON_PROPERTY_WEB_REQUESTS,
  ExternalPropertyFileReferences.JSON_PROPERTY_WEB_RESPONSES,
  ExternalPropertyFileReferences.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T18:04:47.686514Z[GMT]", comments = "Generator version: 7.6.0")
public class ExternalPropertyFileReferences {
  public static final String JSON_PROPERTY_CONVERSION = "conversion";
  private JsonNullable<ExternalPropertyFileReference> conversion = JsonNullable.<ExternalPropertyFileReference>undefined();

  public static final String JSON_PROPERTY_GRAPHS = "graphs";
  private Set<ExternalPropertyFileReference> graphs = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_EXTERNALIZED_PROPERTIES = "externalizedProperties";
  private JsonNullable<ExternalPropertyFileReference> externalizedProperties = JsonNullable.<ExternalPropertyFileReference>undefined();

  public static final String JSON_PROPERTY_ARTIFACTS = "artifacts";
  private Set<ExternalPropertyFileReference> artifacts = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_INVOCATIONS = "invocations";
  private Set<ExternalPropertyFileReference> invocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_LOGICAL_LOCATIONS = "logicalLocations";
  private Set<ExternalPropertyFileReference> logicalLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_THREAD_FLOW_LOCATIONS = "threadFlowLocations";
  private Set<ExternalPropertyFileReference> threadFlowLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_RESULTS = "results";
  private Set<ExternalPropertyFileReference> results = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TAXONOMIES = "taxonomies";
  private Set<ExternalPropertyFileReference> taxonomies = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_ADDRESSES = "addresses";
  private Set<ExternalPropertyFileReference> addresses = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_DRIVER = "driver";
  private JsonNullable<ExternalPropertyFileReference> driver = JsonNullable.<ExternalPropertyFileReference>undefined();

  public static final String JSON_PROPERTY_EXTENSIONS = "extensions";
  private Set<ExternalPropertyFileReference> extensions = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_POLICIES = "policies";
  private Set<ExternalPropertyFileReference> policies = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TRANSLATIONS = "translations";
  private Set<ExternalPropertyFileReference> translations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_WEB_REQUESTS = "webRequests";
  private Set<ExternalPropertyFileReference> webRequests = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_WEB_RESPONSES = "webResponses";
  private Set<ExternalPropertyFileReference> webResponses = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public ExternalPropertyFileReferences() { 
  }

  public ExternalPropertyFileReferences conversion(ExternalPropertyFileReference conversion) {
    this.conversion = JsonNullable.<ExternalPropertyFileReference>of(conversion);
    return this;
  }

   /**
   * Get conversion
   * @return conversion
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public ExternalPropertyFileReference getConversion() {
        return conversion.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExternalPropertyFileReference> getConversion_JsonNullable() {
    return conversion;
  }
  
  @JsonProperty(JSON_PROPERTY_CONVERSION)
  public void setConversion_JsonNullable(JsonNullable<ExternalPropertyFileReference> conversion) {
    this.conversion = conversion;
  }

  public void setConversion(ExternalPropertyFileReference conversion) {
    this.conversion = JsonNullable.<ExternalPropertyFileReference>of(conversion);
  }


  public ExternalPropertyFileReferences graphs(Set<ExternalPropertyFileReference> graphs) {
    this.graphs = graphs;
    return this;
  }

  public ExternalPropertyFileReferences addGraphsItem(ExternalPropertyFileReference graphsItem) {
    if (this.graphs == null) {
      this.graphs = new LinkedHashSet<>();
    }
    this.graphs.add(graphsItem);
    return this;
  }

   /**
   * An array of external property files containing a run.graphs object to be merged with the root log file.
   * @return graphs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getGraphs() {
    return graphs;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphs(Set<ExternalPropertyFileReference> graphs) {
    this.graphs = graphs;
  }


  public ExternalPropertyFileReferences externalizedProperties(ExternalPropertyFileReference externalizedProperties) {
    this.externalizedProperties = JsonNullable.<ExternalPropertyFileReference>of(externalizedProperties);
    return this;
  }

   /**
   * Get externalizedProperties
   * @return externalizedProperties
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public ExternalPropertyFileReference getExternalizedProperties() {
        return externalizedProperties.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTERNALIZED_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExternalPropertyFileReference> getExternalizedProperties_JsonNullable() {
    return externalizedProperties;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTERNALIZED_PROPERTIES)
  public void setExternalizedProperties_JsonNullable(JsonNullable<ExternalPropertyFileReference> externalizedProperties) {
    this.externalizedProperties = externalizedProperties;
  }

  public void setExternalizedProperties(ExternalPropertyFileReference externalizedProperties) {
    this.externalizedProperties = JsonNullable.<ExternalPropertyFileReference>of(externalizedProperties);
  }


  public ExternalPropertyFileReferences artifacts(Set<ExternalPropertyFileReference> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public ExternalPropertyFileReferences addArtifactsItem(ExternalPropertyFileReference artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new LinkedHashSet<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

   /**
   * An array of external property files containing run.artifacts arrays to be merged with the root log file.
   * @return artifacts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getArtifacts() {
    return artifacts;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifacts(Set<ExternalPropertyFileReference> artifacts) {
    this.artifacts = artifacts;
  }


  public ExternalPropertyFileReferences invocations(Set<ExternalPropertyFileReference> invocations) {
    this.invocations = invocations;
    return this;
  }

  public ExternalPropertyFileReferences addInvocationsItem(ExternalPropertyFileReference invocationsItem) {
    if (this.invocations == null) {
      this.invocations = new LinkedHashSet<>();
    }
    this.invocations.add(invocationsItem);
    return this;
  }

   /**
   * An array of external property files containing run.invocations arrays to be merged with the root log file.
   * @return invocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getInvocations() {
    return invocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_INVOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvocations(Set<ExternalPropertyFileReference> invocations) {
    this.invocations = invocations;
  }


  public ExternalPropertyFileReferences logicalLocations(Set<ExternalPropertyFileReference> logicalLocations) {
    this.logicalLocations = logicalLocations;
    return this;
  }

  public ExternalPropertyFileReferences addLogicalLocationsItem(ExternalPropertyFileReference logicalLocationsItem) {
    if (this.logicalLocations == null) {
      this.logicalLocations = new LinkedHashSet<>();
    }
    this.logicalLocations.add(logicalLocationsItem);
    return this;
  }

   /**
   * An array of external property files containing run.logicalLocations arrays to be merged with the root log file.
   * @return logicalLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getLogicalLocations() {
    return logicalLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogicalLocations(Set<ExternalPropertyFileReference> logicalLocations) {
    this.logicalLocations = logicalLocations;
  }


  public ExternalPropertyFileReferences threadFlowLocations(Set<ExternalPropertyFileReference> threadFlowLocations) {
    this.threadFlowLocations = threadFlowLocations;
    return this;
  }

  public ExternalPropertyFileReferences addThreadFlowLocationsItem(ExternalPropertyFileReference threadFlowLocationsItem) {
    if (this.threadFlowLocations == null) {
      this.threadFlowLocations = new LinkedHashSet<>();
    }
    this.threadFlowLocations.add(threadFlowLocationsItem);
    return this;
  }

   /**
   * An array of external property files containing run.threadFlowLocations arrays to be merged with the root log file.
   * @return threadFlowLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_FLOW_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getThreadFlowLocations() {
    return threadFlowLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_THREAD_FLOW_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadFlowLocations(Set<ExternalPropertyFileReference> threadFlowLocations) {
    this.threadFlowLocations = threadFlowLocations;
  }


  public ExternalPropertyFileReferences results(Set<ExternalPropertyFileReference> results) {
    this.results = results;
    return this;
  }

  public ExternalPropertyFileReferences addResultsItem(ExternalPropertyFileReference resultsItem) {
    if (this.results == null) {
      this.results = new LinkedHashSet<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * An array of external property files containing run.results arrays to be merged with the root log file.
   * @return results
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getResults() {
    return results;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResults(Set<ExternalPropertyFileReference> results) {
    this.results = results;
  }


  public ExternalPropertyFileReferences taxonomies(Set<ExternalPropertyFileReference> taxonomies) {
    this.taxonomies = taxonomies;
    return this;
  }

  public ExternalPropertyFileReferences addTaxonomiesItem(ExternalPropertyFileReference taxonomiesItem) {
    if (this.taxonomies == null) {
      this.taxonomies = new LinkedHashSet<>();
    }
    this.taxonomies.add(taxonomiesItem);
    return this;
  }

   /**
   * An array of external property files containing run.taxonomies arrays to be merged with the root log file.
   * @return taxonomies
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getTaxonomies() {
    return taxonomies;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomies(Set<ExternalPropertyFileReference> taxonomies) {
    this.taxonomies = taxonomies;
  }


  public ExternalPropertyFileReferences addresses(Set<ExternalPropertyFileReference> addresses) {
    this.addresses = addresses;
    return this;
  }

  public ExternalPropertyFileReferences addAddressesItem(ExternalPropertyFileReference addressesItem) {
    if (this.addresses == null) {
      this.addresses = new LinkedHashSet<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * An array of external property files containing run.addresses arrays to be merged with the root log file.
   * @return addresses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getAddresses() {
    return addresses;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddresses(Set<ExternalPropertyFileReference> addresses) {
    this.addresses = addresses;
  }


  public ExternalPropertyFileReferences driver(ExternalPropertyFileReference driver) {
    this.driver = JsonNullable.<ExternalPropertyFileReference>of(driver);
    return this;
  }

   /**
   * Get driver
   * @return driver
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public ExternalPropertyFileReference getDriver() {
        return driver.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExternalPropertyFileReference> getDriver_JsonNullable() {
    return driver;
  }
  
  @JsonProperty(JSON_PROPERTY_DRIVER)
  public void setDriver_JsonNullable(JsonNullable<ExternalPropertyFileReference> driver) {
    this.driver = driver;
  }

  public void setDriver(ExternalPropertyFileReference driver) {
    this.driver = JsonNullable.<ExternalPropertyFileReference>of(driver);
  }


  public ExternalPropertyFileReferences extensions(Set<ExternalPropertyFileReference> extensions) {
    this.extensions = extensions;
    return this;
  }

  public ExternalPropertyFileReferences addExtensionsItem(ExternalPropertyFileReference extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new LinkedHashSet<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

   /**
   * An array of external property files containing run.extensions arrays to be merged with the root log file.
   * @return extensions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getExtensions() {
    return extensions;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtensions(Set<ExternalPropertyFileReference> extensions) {
    this.extensions = extensions;
  }


  public ExternalPropertyFileReferences policies(Set<ExternalPropertyFileReference> policies) {
    this.policies = policies;
    return this;
  }

  public ExternalPropertyFileReferences addPoliciesItem(ExternalPropertyFileReference policiesItem) {
    if (this.policies == null) {
      this.policies = new LinkedHashSet<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * An array of external property files containing run.policies arrays to be merged with the root log file.
   * @return policies
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getPolicies() {
    return policies;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicies(Set<ExternalPropertyFileReference> policies) {
    this.policies = policies;
  }


  public ExternalPropertyFileReferences translations(Set<ExternalPropertyFileReference> translations) {
    this.translations = translations;
    return this;
  }

  public ExternalPropertyFileReferences addTranslationsItem(ExternalPropertyFileReference translationsItem) {
    if (this.translations == null) {
      this.translations = new LinkedHashSet<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * An array of external property files containing run.translations arrays to be merged with the root log file.
   * @return translations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getTranslations() {
    return translations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranslations(Set<ExternalPropertyFileReference> translations) {
    this.translations = translations;
  }


  public ExternalPropertyFileReferences webRequests(Set<ExternalPropertyFileReference> webRequests) {
    this.webRequests = webRequests;
    return this;
  }

  public ExternalPropertyFileReferences addWebRequestsItem(ExternalPropertyFileReference webRequestsItem) {
    if (this.webRequests == null) {
      this.webRequests = new LinkedHashSet<>();
    }
    this.webRequests.add(webRequestsItem);
    return this;
  }

   /**
   * An array of external property files containing run.requests arrays to be merged with the root log file.
   * @return webRequests
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getWebRequests() {
    return webRequests;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_WEB_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebRequests(Set<ExternalPropertyFileReference> webRequests) {
    this.webRequests = webRequests;
  }


  public ExternalPropertyFileReferences webResponses(Set<ExternalPropertyFileReference> webResponses) {
    this.webResponses = webResponses;
    return this;
  }

  public ExternalPropertyFileReferences addWebResponsesItem(ExternalPropertyFileReference webResponsesItem) {
    if (this.webResponses == null) {
      this.webResponses = new LinkedHashSet<>();
    }
    this.webResponses.add(webResponsesItem);
    return this;
  }

   /**
   * An array of external property files containing run.responses arrays to be merged with the root log file.
   * @return webResponses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_RESPONSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExternalPropertyFileReference> getWebResponses() {
    return webResponses;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_WEB_RESPONSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebResponses(Set<ExternalPropertyFileReference> webResponses) {
    this.webResponses = webResponses;
  }


  public ExternalPropertyFileReferences properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this externalPropertyFileReferences object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalPropertyFileReferences externalPropertyFileReferences = (ExternalPropertyFileReferences) o;
    return equalsNullable(this.conversion, externalPropertyFileReferences.conversion) &&
        Objects.equals(this.graphs, externalPropertyFileReferences.graphs) &&
        equalsNullable(this.externalizedProperties, externalPropertyFileReferences.externalizedProperties) &&
        Objects.equals(this.artifacts, externalPropertyFileReferences.artifacts) &&
        Objects.equals(this.invocations, externalPropertyFileReferences.invocations) &&
        Objects.equals(this.logicalLocations, externalPropertyFileReferences.logicalLocations) &&
        Objects.equals(this.threadFlowLocations, externalPropertyFileReferences.threadFlowLocations) &&
        Objects.equals(this.results, externalPropertyFileReferences.results) &&
        Objects.equals(this.taxonomies, externalPropertyFileReferences.taxonomies) &&
        Objects.equals(this.addresses, externalPropertyFileReferences.addresses) &&
        equalsNullable(this.driver, externalPropertyFileReferences.driver) &&
        Objects.equals(this.extensions, externalPropertyFileReferences.extensions) &&
        Objects.equals(this.policies, externalPropertyFileReferences.policies) &&
        Objects.equals(this.translations, externalPropertyFileReferences.translations) &&
        Objects.equals(this.webRequests, externalPropertyFileReferences.webRequests) &&
        Objects.equals(this.webResponses, externalPropertyFileReferences.webResponses) &&
        Objects.equals(this.properties, externalPropertyFileReferences.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(conversion), graphs, hashCodeNullable(externalizedProperties), artifacts, invocations, logicalLocations, threadFlowLocations, results, taxonomies, addresses, hashCodeNullable(driver), extensions, policies, translations, webRequests, webResponses, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalPropertyFileReferences {\n");
    sb.append("    conversion: ").append(toIndentedString(conversion)).append("\n");
    sb.append("    graphs: ").append(toIndentedString(graphs)).append("\n");
    sb.append("    externalizedProperties: ").append(toIndentedString(externalizedProperties)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    invocations: ").append(toIndentedString(invocations)).append("\n");
    sb.append("    logicalLocations: ").append(toIndentedString(logicalLocations)).append("\n");
    sb.append("    threadFlowLocations: ").append(toIndentedString(threadFlowLocations)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    taxonomies: ").append(toIndentedString(taxonomies)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    webRequests: ").append(toIndentedString(webRequests)).append("\n");
    sb.append("    webResponses: ").append(toIndentedString(webResponses)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `conversion` to the URL query string
    if (getConversion() != null) {
      joiner.add(getConversion().toUrlQueryString(prefix + "conversion" + suffix));
    }

    // add `graphs` to the URL query string
    if (getGraphs() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getGraphs()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sgraphs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `externalizedProperties` to the URL query string
    if (getExternalizedProperties() != null) {
      joiner.add(getExternalizedProperties().toUrlQueryString(prefix + "externalizedProperties" + suffix));
    }

    // add `artifacts` to the URL query string
    if (getArtifacts() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getArtifacts()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sartifacts%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `invocations` to the URL query string
    if (getInvocations() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getInvocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sinvocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `logicalLocations` to the URL query string
    if (getLogicalLocations() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getLogicalLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%slogicalLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `threadFlowLocations` to the URL query string
    if (getThreadFlowLocations() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getThreadFlowLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sthreadFlowLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `results` to the URL query string
    if (getResults() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getResults()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sresults%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `taxonomies` to the URL query string
    if (getTaxonomies() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getTaxonomies()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%staxonomies%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `addresses` to the URL query string
    if (getAddresses() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getAddresses()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%saddresses%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(getDriver().toUrlQueryString(prefix + "driver" + suffix));
    }

    // add `extensions` to the URL query string
    if (getExtensions() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getExtensions()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sextensions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `policies` to the URL query string
    if (getPolicies() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getPolicies()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%spolicies%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `translations` to the URL query string
    if (getTranslations() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getTranslations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%stranslations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `webRequests` to the URL query string
    if (getWebRequests() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getWebRequests()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%swebRequests%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `webResponses` to the URL query string
    if (getWebResponses() != null) {
      int i = 0;
      for (ExternalPropertyFileReference _item : getWebResponses()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%swebResponses%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

