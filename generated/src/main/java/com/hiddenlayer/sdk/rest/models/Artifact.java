/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.hiddenlayer.sdk.rest.models.ArtifactContent;
import com.hiddenlayer.sdk.rest.models.ArtifactLocation;
import com.hiddenlayer.sdk.rest.models.Message;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A single artifact. In some cases, this artifact might be nested within another artifact.
 */
@JsonPropertyOrder({
  Artifact.JSON_PROPERTY_DESCRIPTION,
  Artifact.JSON_PROPERTY_LOCATION,
  Artifact.JSON_PROPERTY_PARENT_INDEX,
  Artifact.JSON_PROPERTY_OFFSET,
  Artifact.JSON_PROPERTY_LENGTH,
  Artifact.JSON_PROPERTY_ROLES,
  Artifact.JSON_PROPERTY_MIME_TYPE,
  Artifact.JSON_PROPERTY_CONTENTS,
  Artifact.JSON_PROPERTY_ENCODING,
  Artifact.JSON_PROPERTY_SOURCE_LANGUAGE,
  Artifact.JSON_PROPERTY_HASHES,
  Artifact.JSON_PROPERTY_LAST_MODIFIED_TIME_UTC,
  Artifact.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-19T23:42:19.631048Z[GMT]", comments = "Generator version: 7.6.0")
public class Artifact {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<Message> description = JsonNullable.<Message>undefined();

  public static final String JSON_PROPERTY_LOCATION = "location";
  private ArtifactLocation location;

  public static final String JSON_PROPERTY_PARENT_INDEX = "parentIndex";
  private Integer parentIndex = -1;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Integer offset;

  public static final String JSON_PROPERTY_LENGTH = "length";
  private Integer length = -1;

  /**
   * Gets or Sets roles
   */
  public enum RolesEnum {
    ANALYSISTARGET("analysisTarget"),
    
    ATTACHMENT("attachment"),
    
    RESPONSEFILE("responseFile"),
    
    RESULTFILE("resultFile"),
    
    STANDARDSTREAM("standardStream"),
    
    TRACEDFILE("tracedFile"),
    
    UNMODIFIED("unmodified"),
    
    MODIFIED("modified"),
    
    ADDED("added"),
    
    DELETED("deleted"),
    
    RENAMED("renamed"),
    
    UNCONTROLLED("uncontrolled"),
    
    DRIVER("driver"),
    
    EXTENSION("extension"),
    
    TRANSLATION("translation"),
    
    TAXONOMY("taxonomy"),
    
    POLICY("policy"),
    
    REFERENCEDONCOMMANDLINE("referencedOnCommandLine"),
    
    MEMORYCONTENTS("memoryContents"),
    
    DIRECTORY("directory"),
    
    USERSPECIFIEDCONFIGURATION("userSpecifiedConfiguration"),
    
    TOOLSPECIFIEDCONFIGURATION("toolSpecifiedConfiguration"),
    
    DEBUGOUTPUTFILE("debugOutputFile");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RolesEnum fromValue(String value) {
      for (RolesEnum b : RolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROLES = "roles";
  private Set<RolesEnum> roles = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;

  public static final String JSON_PROPERTY_CONTENTS = "contents";
  private ArtifactContent contents;

  public static final String JSON_PROPERTY_ENCODING = "encoding";
  private String encoding;

  public static final String JSON_PROPERTY_SOURCE_LANGUAGE = "sourceLanguage";
  private String sourceLanguage;

  public static final String JSON_PROPERTY_HASHES = "hashes";
  private Map<String, String> hashes = new HashMap<>();

  public static final String JSON_PROPERTY_LAST_MODIFIED_TIME_UTC = "lastModifiedTimeUtc";
  private OffsetDateTime lastModifiedTimeUtc;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Artifact() { 
  }

  public Artifact description(Message description) {
    this.description = JsonNullable.<Message>of(description);
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Message getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Message> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<Message> description) {
    this.description = description;
  }

  public void setDescription(Message description) {
    this.description = JsonNullable.<Message>of(description);
  }


  public Artifact location(ArtifactLocation location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(ArtifactLocation location) {
    this.location = location;
  }


  public Artifact parentIndex(Integer parentIndex) {
    this.parentIndex = parentIndex;
    return this;
  }

   /**
   * Identifies the index of the immediate parent of the artifact, if this artifact is nested.
   * minimum: -1
   * @return parentIndex
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getParentIndex() {
    return parentIndex;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentIndex(Integer parentIndex) {
    this.parentIndex = parentIndex;
  }


  public Artifact offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The offset in bytes of the artifact within its containing artifact.
   * minimum: 0
   * @return offset
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public Artifact length(Integer length) {
    this.length = length;
    return this;
  }

   /**
   * The length of the artifact in bytes.
   * minimum: -1
   * @return length
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(Integer length) {
    this.length = length;
  }


  public Artifact roles(Set<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public Artifact addRolesItem(RolesEnum rolesItem) {
    if (this.roles == null) {
      this.roles = new LinkedHashSet<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * The role or roles played by the artifact in the analysis.
   * @return roles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<RolesEnum> getRoles() {
    return roles;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(Set<RolesEnum> roles) {
    this.roles = roles;
  }


  public Artifact mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * The MIME type (RFC 2045) of the artifact.
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public Artifact contents(ArtifactContent contents) {
    this.contents = contents;
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactContent getContents() {
    return contents;
  }


  @JsonProperty(JSON_PROPERTY_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContents(ArtifactContent contents) {
    this.contents = contents;
  }


  public Artifact encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Specifies the encoding for an artifact object that refers to a text file.
   * @return encoding
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncoding() {
    return encoding;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public Artifact sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

   /**
   * Specifies the source language for any artifact object that refers to a text file that contains source code.
   * @return sourceLanguage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceLanguage() {
    return sourceLanguage;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public Artifact hashes(Map<String, String> hashes) {
    this.hashes = hashes;
    return this;
  }

  public Artifact putHashesItem(String key, String hashesItem) {
    if (this.hashes == null) {
      this.hashes = new HashMap<>();
    }
    this.hashes.put(key, hashesItem);
    return this;
  }

   /**
   * A dictionary, each of whose keys is the name of a hash function and each of whose values is the hashed value of the artifact produced by the specified hash function.
   * @return hashes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HASHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getHashes() {
    return hashes;
  }


  @JsonProperty(JSON_PROPERTY_HASHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHashes(Map<String, String> hashes) {
    this.hashes = hashes;
  }


  public Artifact lastModifiedTimeUtc(OffsetDateTime lastModifiedTimeUtc) {
    this.lastModifiedTimeUtc = lastModifiedTimeUtc;
    return this;
  }

   /**
   * The Coordinated Universal Time (UTC) date and time at which the artifact was most recently modified. See \&quot;Date/time properties\&quot; in the SARIF spec for the required format.
   * @return lastModifiedTimeUtc
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastModifiedTimeUtc() {
    return lastModifiedTimeUtc;
  }


  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastModifiedTimeUtc(OffsetDateTime lastModifiedTimeUtc) {
    this.lastModifiedTimeUtc = lastModifiedTimeUtc;
  }


  public Artifact properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this artifact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Artifact artifact = (Artifact) o;
    return equalsNullable(this.description, artifact.description) &&
        Objects.equals(this.location, artifact.location) &&
        Objects.equals(this.parentIndex, artifact.parentIndex) &&
        Objects.equals(this.offset, artifact.offset) &&
        Objects.equals(this.length, artifact.length) &&
        Objects.equals(this.roles, artifact.roles) &&
        Objects.equals(this.mimeType, artifact.mimeType) &&
        Objects.equals(this.contents, artifact.contents) &&
        Objects.equals(this.encoding, artifact.encoding) &&
        Objects.equals(this.sourceLanguage, artifact.sourceLanguage) &&
        Objects.equals(this.hashes, artifact.hashes) &&
        Objects.equals(this.lastModifiedTimeUtc, artifact.lastModifiedTimeUtc) &&
        Objects.equals(this.properties, artifact.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(description), location, parentIndex, offset, length, roles, mimeType, contents, encoding, sourceLanguage, hashes, lastModifiedTimeUtc, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Artifact {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    parentIndex: ").append(toIndentedString(parentIndex)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    hashes: ").append(toIndentedString(hashes)).append("\n");
    sb.append("    lastModifiedTimeUtc: ").append(toIndentedString(lastModifiedTimeUtc)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(getDescription().toUrlQueryString(prefix + "description" + suffix));
    }

    // add `location` to the URL query string
    if (getLocation() != null) {
      joiner.add(getLocation().toUrlQueryString(prefix + "location" + suffix));
    }

    // add `parentIndex` to the URL query string
    if (getParentIndex() != null) {
      joiner.add(String.format("%sparentIndex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `offset` to the URL query string
    if (getOffset() != null) {
      joiner.add(String.format("%soffset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOffset()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `length` to the URL query string
    if (getLength() != null) {
      joiner.add(String.format("%slength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      int i = 0;
      for (RolesEnum _item : getRoles()) {
        joiner.add(String.format("%sroles%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `mimeType` to the URL query string
    if (getMimeType() != null) {
      joiner.add(String.format("%smimeType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMimeType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `contents` to the URL query string
    if (getContents() != null) {
      joiner.add(getContents().toUrlQueryString(prefix + "contents" + suffix));
    }

    // add `encoding` to the URL query string
    if (getEncoding() != null) {
      joiner.add(String.format("%sencoding%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEncoding()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sourceLanguage` to the URL query string
    if (getSourceLanguage() != null) {
      joiner.add(String.format("%ssourceLanguage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceLanguage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hashes` to the URL query string
    if (getHashes() != null) {
      for (String _key : getHashes().keySet()) {
        joiner.add(String.format("%shashes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getHashes().get(_key), URLEncoder.encode(String.valueOf(getHashes().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `lastModifiedTimeUtc` to the URL query string
    if (getLastModifiedTimeUtc() != null) {
      joiner.add(String.format("%slastModifiedTimeUtc%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastModifiedTimeUtc()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

