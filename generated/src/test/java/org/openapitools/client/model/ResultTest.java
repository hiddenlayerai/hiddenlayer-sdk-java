/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ArtifactLocation;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.CodeFlow;
import org.openapitools.client.model.Fix;
import org.openapitools.client.model.Graph;
import org.openapitools.client.model.GraphTraversal;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.PropertyBag;
import org.openapitools.client.model.ReportingDescriptorReference;
import org.openapitools.client.model.ResultProvenance;
import org.openapitools.client.model.Stack;
import org.openapitools.client.model.Suppression;
import org.openapitools.client.model.WebRequest;
import org.openapitools.client.model.WebResponse;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Result
 */
class ResultTest {
    private final Result model = new Result();

    /**
     * Model tests for Result
     */
    @Test
    void testResult() {
        // TODO: test Result
    }

    /**
     * Test the property 'ruleId'
     */
    @Test
    void ruleIdTest() {
        // TODO: test ruleId
    }

    /**
     * Test the property 'ruleIndex'
     */
    @Test
    void ruleIndexTest() {
        // TODO: test ruleIndex
    }

    /**
     * Test the property 'rule'
     */
    @Test
    void ruleTest() {
        // TODO: test rule
    }

    /**
     * Test the property 'kind'
     */
    @Test
    void kindTest() {
        // TODO: test kind
    }

    /**
     * Test the property 'level'
     */
    @Test
    void levelTest() {
        // TODO: test level
    }

    /**
     * Test the property 'message'
     */
    @Test
    void messageTest() {
        // TODO: test message
    }

    /**
     * Test the property 'analysisTarget'
     */
    @Test
    void analysisTargetTest() {
        // TODO: test analysisTarget
    }

    /**
     * Test the property 'locations'
     */
    @Test
    void locationsTest() {
        // TODO: test locations
    }

    /**
     * Test the property 'guid'
     */
    @Test
    void guidTest() {
        // TODO: test guid
    }

    /**
     * Test the property 'correlationGuid'
     */
    @Test
    void correlationGuidTest() {
        // TODO: test correlationGuid
    }

    /**
     * Test the property 'occurrenceCount'
     */
    @Test
    void occurrenceCountTest() {
        // TODO: test occurrenceCount
    }

    /**
     * Test the property 'partialFingerprints'
     */
    @Test
    void partialFingerprintsTest() {
        // TODO: test partialFingerprints
    }

    /**
     * Test the property 'fingerprints'
     */
    @Test
    void fingerprintsTest() {
        // TODO: test fingerprints
    }

    /**
     * Test the property 'stacks'
     */
    @Test
    void stacksTest() {
        // TODO: test stacks
    }

    /**
     * Test the property 'codeFlows'
     */
    @Test
    void codeFlowsTest() {
        // TODO: test codeFlows
    }

    /**
     * Test the property 'graphs'
     */
    @Test
    void graphsTest() {
        // TODO: test graphs
    }

    /**
     * Test the property 'graphTraversals'
     */
    @Test
    void graphTraversalsTest() {
        // TODO: test graphTraversals
    }

    /**
     * Test the property 'relatedLocations'
     */
    @Test
    void relatedLocationsTest() {
        // TODO: test relatedLocations
    }

    /**
     * Test the property 'suppressions'
     */
    @Test
    void suppressionsTest() {
        // TODO: test suppressions
    }

    /**
     * Test the property 'baselineState'
     */
    @Test
    void baselineStateTest() {
        // TODO: test baselineState
    }

    /**
     * Test the property 'rank'
     */
    @Test
    void rankTest() {
        // TODO: test rank
    }

    /**
     * Test the property 'attachments'
     */
    @Test
    void attachmentsTest() {
        // TODO: test attachments
    }

    /**
     * Test the property 'hostedViewerUri'
     */
    @Test
    void hostedViewerUriTest() {
        // TODO: test hostedViewerUri
    }

    /**
     * Test the property 'workItemUris'
     */
    @Test
    void workItemUrisTest() {
        // TODO: test workItemUris
    }

    /**
     * Test the property 'provenance'
     */
    @Test
    void provenanceTest() {
        // TODO: test provenance
    }

    /**
     * Test the property 'fixes'
     */
    @Test
    void fixesTest() {
        // TODO: test fixes
    }

    /**
     * Test the property 'taxa'
     */
    @Test
    void taxaTest() {
        // TODO: test taxa
    }

    /**
     * Test the property 'webRequest'
     */
    @Test
    void webRequestTest() {
        // TODO: test webRequest
    }

    /**
     * Test the property 'webResponse'
     */
    @Test
    void webResponseTest() {
        // TODO: test webResponse
    }

    /**
     * Test the property 'properties'
     */
    @Test
    void propertiesTest() {
        // TODO: test properties
    }

}
