/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package hiddenlayer.sdk.rest;

import hiddenlayer.sdk.ApiException;
import org.openapitools.client.model.ModelScanApiV3ScanModelVersionIdPatch200Response;
import org.openapitools.client.model.ModelScanApiV3ScanQuery200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Sarif210;
import org.openapitools.client.model.ScanCreateRequest;
import org.openapitools.client.model.ScanJob;
import org.openapitools.client.model.ScanReportV3;
import org.openapitools.client.model.ScanResultsV2;
import java.util.UUID;
import org.openapitools.client.model.ValidationErrorModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ModelSupplyChainApi
 */
@Disabled
public class ModelSupplyChainApiTest {

    private final ModelSupplyChainApi api = new ModelSupplyChainApi();

    
    /**
     * Get Result of a Model Scan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelScanApiV3ScanModelVersionIdGetTest() throws ApiException {
        UUID scanId = null;
        Boolean hasDetections = null;
        ScanReportV3 response = 
        api.modelScanApiV3ScanModelVersionIdGet(scanId, hasDetections);
        
        // TODO: test validations
    }
    
    /**
     * Indicate part (file or files) of a model scan has completed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelScanApiV3ScanModelVersionIdPatchTest() throws ApiException {
        UUID scanId = null;
        ScanReportV3 scanReportV3 = null;
        Boolean hasDetections = null;
        ModelScanApiV3ScanModelVersionIdPatch200Response response = 
        api.modelScanApiV3ScanModelVersionIdPatch(scanId, scanReportV3, hasDetections);
        
        // TODO: test validations
    }
    
    /**
     * Indicate model scan has started
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelScanApiV3ScanModelVersionIdPostTest() throws ApiException {
        UUID scanId = null;
        ScanReportV3 scanReportV3 = null;
        Boolean hasDetections = null;
        
        api.modelScanApiV3ScanModelVersionIdPost(scanId, scanReportV3, hasDetections);
        
        // TODO: test validations
    }
    
    /**
     * Get condensed reports for a Model Scan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelScanApiV3ScanQueryTest() throws ApiException {
        List<String> modelVersionIds = null;
        List<String> modelIds = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        List<String> severity = null;
        List<String> status = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        Boolean latestPerModelVersionOnly = null;
        ModelScanApiV3ScanQuery200Response response = 
        api.modelScanApiV3ScanQuery(modelVersionIds, modelIds, startTime, endTime, severity, status, limit, offset, sort, latestPerModelVersionOnly);
        
        // TODO: test validations
    }
    
    /**
     * Retrieve Model Scan Results
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscanApiV3GetScanResultsTest() throws ApiException {
        UUID scanId = null;
        List<ScanResultsV2> response = 
        api.modelscanApiV3GetScanResults(scanId);
        
        // TODO: test validations
    }
    
    /**
     * Engine Report Endpoint of Model Scan Results
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscanApiV3PostScanResultsTest() throws ApiException {
        UUID scanId = null;
        ScanCreateRequest scanCreateRequest = null;
        
        api.modelscanApiV3PostScanResults(scanId, scanCreateRequest);
        
        // TODO: test validations
    }
    
    /**
     * List all Model Scan Jobs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscannerApiV3GetJobsTest() throws ApiException {
        List<ScanJob> response = 
        api.modelscannerApiV3GetJobs();
        
        // TODO: test validations
    }
    
    /**
     * Health check endpoint for Model Supply Chain Services
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscannerApiV3HealthCheckTest() throws ApiException {
        
        api.modelscannerApiV3HealthCheck();
        
        // TODO: test validations
    }
    
    /**
     * Request a Model Scan Job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscannerApiV3PostRequestTest() throws ApiException {
        ScanJob scanJob = null;
        
        api.modelscannerApiV3PostRequest(scanJob);
        
        // TODO: test validations
    }
    
    /**
     * Readiness check endpoint for Model Supply Chain Services
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelscannerApiV3ReadinessCheckTest() throws ApiException {
        
        api.modelscannerApiV3ReadinessCheck();
        
        // TODO: test validations
    }
    
}
