/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ArtifactLocation;
import org.openapitools.client.model.Conversion;
import org.openapitools.client.model.ExternalPropertyFileReferences;
import org.openapitools.client.model.Graph;
import org.openapitools.client.model.Invocation;
import org.openapitools.client.model.LogicalLocation;
import org.openapitools.client.model.PropertyBag;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.RunAutomationDetails;
import org.openapitools.client.model.SpecialLocations;
import org.openapitools.client.model.ThreadFlowLocation;
import org.openapitools.client.model.Tool;
import org.openapitools.client.model.ToolComponent;
import org.openapitools.client.model.VersionControlDetails;
import org.openapitools.client.model.WebRequest;
import org.openapitools.client.model.WebResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Run
 */
class RunTest {
    private final Run model = new Run();

    /**
     * Model tests for Run
     */
    @Test
    void testRun() {
        // TODO: test Run
    }

    /**
     * Test the property 'tool'
     */
    @Test
    void toolTest() {
        // TODO: test tool
    }

    /**
     * Test the property 'invocations'
     */
    @Test
    void invocationsTest() {
        // TODO: test invocations
    }

    /**
     * Test the property 'conversion'
     */
    @Test
    void conversionTest() {
        // TODO: test conversion
    }

    /**
     * Test the property 'language'
     */
    @Test
    void languageTest() {
        // TODO: test language
    }

    /**
     * Test the property 'versionControlProvenance'
     */
    @Test
    void versionControlProvenanceTest() {
        // TODO: test versionControlProvenance
    }

    /**
     * Test the property 'originalUriBaseIds'
     */
    @Test
    void originalUriBaseIdsTest() {
        // TODO: test originalUriBaseIds
    }

    /**
     * Test the property 'artifacts'
     */
    @Test
    void artifactsTest() {
        // TODO: test artifacts
    }

    /**
     * Test the property 'logicalLocations'
     */
    @Test
    void logicalLocationsTest() {
        // TODO: test logicalLocations
    }

    /**
     * Test the property 'graphs'
     */
    @Test
    void graphsTest() {
        // TODO: test graphs
    }

    /**
     * Test the property 'results'
     */
    @Test
    void resultsTest() {
        // TODO: test results
    }

    /**
     * Test the property 'automationDetails'
     */
    @Test
    void automationDetailsTest() {
        // TODO: test automationDetails
    }

    /**
     * Test the property 'runAggregates'
     */
    @Test
    void runAggregatesTest() {
        // TODO: test runAggregates
    }

    /**
     * Test the property 'baselineGuid'
     */
    @Test
    void baselineGuidTest() {
        // TODO: test baselineGuid
    }

    /**
     * Test the property 'redactionTokens'
     */
    @Test
    void redactionTokensTest() {
        // TODO: test redactionTokens
    }

    /**
     * Test the property 'defaultEncoding'
     */
    @Test
    void defaultEncodingTest() {
        // TODO: test defaultEncoding
    }

    /**
     * Test the property 'defaultSourceLanguage'
     */
    @Test
    void defaultSourceLanguageTest() {
        // TODO: test defaultSourceLanguage
    }

    /**
     * Test the property 'newlineSequences'
     */
    @Test
    void newlineSequencesTest() {
        // TODO: test newlineSequences
    }

    /**
     * Test the property 'columnKind'
     */
    @Test
    void columnKindTest() {
        // TODO: test columnKind
    }

    /**
     * Test the property 'externalPropertyFileReferences'
     */
    @Test
    void externalPropertyFileReferencesTest() {
        // TODO: test externalPropertyFileReferences
    }

    /**
     * Test the property 'threadFlowLocations'
     */
    @Test
    void threadFlowLocationsTest() {
        // TODO: test threadFlowLocations
    }

    /**
     * Test the property 'taxonomies'
     */
    @Test
    void taxonomiesTest() {
        // TODO: test taxonomies
    }

    /**
     * Test the property 'addresses'
     */
    @Test
    void addressesTest() {
        // TODO: test addresses
    }

    /**
     * Test the property 'translations'
     */
    @Test
    void translationsTest() {
        // TODO: test translations
    }

    /**
     * Test the property 'policies'
     */
    @Test
    void policiesTest() {
        // TODO: test policies
    }

    /**
     * Test the property 'webRequests'
     */
    @Test
    void webRequestsTest() {
        // TODO: test webRequests
    }

    /**
     * Test the property 'webResponses'
     */
    @Test
    void webResponsesTest() {
        // TODO: test webResponses
    }

    /**
     * Test the property 'specialLocations'
     */
    @Test
    void specialLocationsTest() {
        // TODO: test specialLocations
    }

    /**
     * Test the property 'properties'
     */
    @Test
    void propertiesTest() {
        // TODO: test properties
    }

}
