/*
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenlayer.sdk.rest.models.FileScanReportV3;
import com.hiddenlayer.sdk.rest.models.ModelInventoryInfo;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ScanReportV3
 */
@JsonPropertyOrder({
  ScanReportV3.JSON_PROPERTY_FILE_COUNT,
  ScanReportV3.JSON_PROPERTY_FILES_WITH_DETECTIONS_COUNT,
  ScanReportV3.JSON_PROPERTY_DETECTION_COUNT,
  ScanReportV3.JSON_PROPERTY_DETECTION_CATEGORIES,
  ScanReportV3.JSON_PROPERTY_INVENTORY,
  ScanReportV3.JSON_PROPERTY_VERSION,
  ScanReportV3.JSON_PROPERTY_SCAN_ID,
  ScanReportV3.JSON_PROPERTY_START_TIME,
  ScanReportV3.JSON_PROPERTY_END_TIME,
  ScanReportV3.JSON_PROPERTY_STATUS,
  ScanReportV3.JSON_PROPERTY_SEVERITY,
  ScanReportV3.JSON_PROPERTY_FILE_RESULTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-10T21:03:59.882437Z[GMT]", comments = "Generator version: 7.6.0")
public class ScanReportV3 {
  public static final String JSON_PROPERTY_FILE_COUNT = "file_count";
  private Integer fileCount;

  public static final String JSON_PROPERTY_FILES_WITH_DETECTIONS_COUNT = "files_with_detections_count";
  private Integer filesWithDetectionsCount;

  public static final String JSON_PROPERTY_DETECTION_COUNT = "detection_count";
  private Integer detectionCount;

  public static final String JSON_PROPERTY_DETECTION_CATEGORIES = "detection_categories";
  private List<String> detectionCategories = new ArrayList<>();

  public static final String JSON_PROPERTY_INVENTORY = "inventory";
  private ModelInventoryInfo inventory;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_SCAN_ID = "scan_id";
  private String scanId;

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  private OffsetDateTime startTime;

  public static final String JSON_PROPERTY_END_TIME = "end_time";
  private OffsetDateTime endTime;

  /**
   * status of the scan
   */
  public enum StatusEnum {
    PENDING("pending"),
    
    RUNNING("running"),
    
    DONE("done"),
    
    FAILED("failed"),
    
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * detection severity
   */
  public enum SeverityEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high"),
    
    CRITICAL("critical"),
    
    SAFE("safe"),
    
    UNKNOWN("unknown");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private SeverityEnum severity;

  public static final String JSON_PROPERTY_FILE_RESULTS = "file_results";
  private List<FileScanReportV3> fileResults = new ArrayList<>();

  public ScanReportV3() { 
  }

  public ScanReportV3 fileCount(Integer fileCount) {
    this.fileCount = fileCount;
    return this;
  }

   /**
   * number of files scanned
   * @return fileCount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFileCount() {
    return fileCount;
  }


  @JsonProperty(JSON_PROPERTY_FILE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileCount(Integer fileCount) {
    this.fileCount = fileCount;
  }


  public ScanReportV3 filesWithDetectionsCount(Integer filesWithDetectionsCount) {
    this.filesWithDetectionsCount = filesWithDetectionsCount;
    return this;
  }

   /**
   * number of files with detections found
   * @return filesWithDetectionsCount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILES_WITH_DETECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFilesWithDetectionsCount() {
    return filesWithDetectionsCount;
  }


  @JsonProperty(JSON_PROPERTY_FILES_WITH_DETECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilesWithDetectionsCount(Integer filesWithDetectionsCount) {
    this.filesWithDetectionsCount = filesWithDetectionsCount;
  }


  public ScanReportV3 detectionCount(Integer detectionCount) {
    this.detectionCount = detectionCount;
    return this;
  }

   /**
   * number of detections found
   * @return detectionCount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DETECTION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDetectionCount() {
    return detectionCount;
  }


  @JsonProperty(JSON_PROPERTY_DETECTION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDetectionCount(Integer detectionCount) {
    this.detectionCount = detectionCount;
  }


  public ScanReportV3 detectionCategories(List<String> detectionCategories) {
    this.detectionCategories = detectionCategories;
    return this;
  }

  public ScanReportV3 addDetectionCategoriesItem(String detectionCategoriesItem) {
    if (this.detectionCategories == null) {
      this.detectionCategories = new ArrayList<>();
    }
    this.detectionCategories.add(detectionCategoriesItem);
    return this;
  }

   /**
   * list of detection categories found
   * @return detectionCategories
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETECTION_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDetectionCategories() {
    return detectionCategories;
  }


  @JsonProperty(JSON_PROPERTY_DETECTION_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetectionCategories(List<String> detectionCategories) {
    this.detectionCategories = detectionCategories;
  }


  public ScanReportV3 inventory(ModelInventoryInfo inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INVENTORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ModelInventoryInfo getInventory() {
    return inventory;
  }


  @JsonProperty(JSON_PROPERTY_INVENTORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInventory(ModelInventoryInfo inventory) {
    this.inventory = inventory;
  }


  public ScanReportV3 version(String version) {
    this.version = version;
    return this;
  }

   /**
   * scanner version
   * @return version
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public ScanReportV3 scanId(String scanId) {
    this.scanId = scanId;
    return this;
  }

   /**
   * unique identifier for the scan
   * @return scanId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SCAN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getScanId() {
    return scanId;
  }


  @JsonProperty(JSON_PROPERTY_SCAN_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScanId(String scanId) {
    this.scanId = scanId;
  }


  public ScanReportV3 startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * time the scan started
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ScanReportV3 endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * time the scan ended
   * @return endTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ScanReportV3 status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * status of the scan
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ScanReportV3 severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

   /**
   * detection severity
   * @return severity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SeverityEnum getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public ScanReportV3 fileResults(List<FileScanReportV3> fileResults) {
    this.fileResults = fileResults;
    return this;
  }

  public ScanReportV3 addFileResultsItem(FileScanReportV3 fileResultsItem) {
    if (this.fileResults == null) {
      this.fileResults = new ArrayList<>();
    }
    this.fileResults.add(fileResultsItem);
    return this;
  }

   /**
   * Get fileResults
   * @return fileResults
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FileScanReportV3> getFileResults() {
    return fileResults;
  }


  @JsonProperty(JSON_PROPERTY_FILE_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileResults(List<FileScanReportV3> fileResults) {
    this.fileResults = fileResults;
  }


  /**
   * Return true if this ScanReportV3 object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanReportV3 scanReportV3 = (ScanReportV3) o;
    return Objects.equals(this.fileCount, scanReportV3.fileCount) &&
        Objects.equals(this.filesWithDetectionsCount, scanReportV3.filesWithDetectionsCount) &&
        Objects.equals(this.detectionCount, scanReportV3.detectionCount) &&
        Objects.equals(this.detectionCategories, scanReportV3.detectionCategories) &&
        Objects.equals(this.inventory, scanReportV3.inventory) &&
        Objects.equals(this.version, scanReportV3.version) &&
        Objects.equals(this.scanId, scanReportV3.scanId) &&
        Objects.equals(this.startTime, scanReportV3.startTime) &&
        Objects.equals(this.endTime, scanReportV3.endTime) &&
        Objects.equals(this.status, scanReportV3.status) &&
        Objects.equals(this.severity, scanReportV3.severity) &&
        Objects.equals(this.fileResults, scanReportV3.fileResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileCount, filesWithDetectionsCount, detectionCount, detectionCategories, inventory, version, scanId, startTime, endTime, status, severity, fileResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanReportV3 {\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    filesWithDetectionsCount: ").append(toIndentedString(filesWithDetectionsCount)).append("\n");
    sb.append("    detectionCount: ").append(toIndentedString(detectionCount)).append("\n");
    sb.append("    detectionCategories: ").append(toIndentedString(detectionCategories)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    scanId: ").append(toIndentedString(scanId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    fileResults: ").append(toIndentedString(fileResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `file_count` to the URL query string
    if (getFileCount() != null) {
      joiner.add(String.format("%sfile_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `files_with_detections_count` to the URL query string
    if (getFilesWithDetectionsCount() != null) {
      joiner.add(String.format("%sfiles_with_detections_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilesWithDetectionsCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `detection_count` to the URL query string
    if (getDetectionCount() != null) {
      joiner.add(String.format("%sdetection_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDetectionCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `detection_categories` to the URL query string
    if (getDetectionCategories() != null) {
      for (int i = 0; i < getDetectionCategories().size(); i++) {
        joiner.add(String.format("%sdetection_categories%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getDetectionCategories().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `inventory` to the URL query string
    if (getInventory() != null) {
      joiner.add(getInventory().toUrlQueryString(prefix + "inventory" + suffix));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `scan_id` to the URL query string
    if (getScanId() != null) {
      joiner.add(String.format("%sscan_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScanId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `start_time` to the URL query string
    if (getStartTime() != null) {
      joiner.add(String.format("%sstart_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `end_time` to the URL query string
    if (getEndTime() != null) {
      joiner.add(String.format("%send_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `severity` to the URL query string
    if (getSeverity() != null) {
      joiner.add(String.format("%sseverity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeverity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `file_results` to the URL query string
    if (getFileResults() != null) {
      for (int i = 0; i < getFileResults().size(); i++) {
        if (getFileResults().get(i) != null) {
          joiner.add(getFileResults().get(i).toUrlQueryString(String.format("%sfile_results%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

