/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A physical or virtual address, or a range of addresses, in an &#39;addressable region&#39; (memory or a binary file).
 */
@JsonPropertyOrder({
  Address.JSON_PROPERTY_ABSOLUTE_ADDRESS,
  Address.JSON_PROPERTY_RELATIVE_ADDRESS,
  Address.JSON_PROPERTY_LENGTH,
  Address.JSON_PROPERTY_KIND,
  Address.JSON_PROPERTY_NAME,
  Address.JSON_PROPERTY_FULLY_QUALIFIED_NAME,
  Address.JSON_PROPERTY_OFFSET_FROM_PARENT,
  Address.JSON_PROPERTY_INDEX,
  Address.JSON_PROPERTY_PARENT_INDEX,
  Address.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T18:04:47.686514Z[GMT]", comments = "Generator version: 7.6.0")
public class Address {
  public static final String JSON_PROPERTY_ABSOLUTE_ADDRESS = "absoluteAddress";
  private Integer absoluteAddress = -1;

  public static final String JSON_PROPERTY_RELATIVE_ADDRESS = "relativeAddress";
  private Integer relativeAddress;

  public static final String JSON_PROPERTY_LENGTH = "length";
  private Integer length;

  public static final String JSON_PROPERTY_KIND = "kind";
  private String kind;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FULLY_QUALIFIED_NAME = "fullyQualifiedName";
  private String fullyQualifiedName;

  public static final String JSON_PROPERTY_OFFSET_FROM_PARENT = "offsetFromParent";
  private Integer offsetFromParent;

  public static final String JSON_PROPERTY_INDEX = "index";
  private Integer index = -1;

  public static final String JSON_PROPERTY_PARENT_INDEX = "parentIndex";
  private Integer parentIndex = -1;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Address() { 
  }

  public Address absoluteAddress(Integer absoluteAddress) {
    this.absoluteAddress = absoluteAddress;
    return this;
  }

   /**
   * The address expressed as a byte offset from the start of the addressable region.
   * minimum: -1
   * @return absoluteAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABSOLUTE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAbsoluteAddress() {
    return absoluteAddress;
  }


  @JsonProperty(JSON_PROPERTY_ABSOLUTE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbsoluteAddress(Integer absoluteAddress) {
    this.absoluteAddress = absoluteAddress;
  }


  public Address relativeAddress(Integer relativeAddress) {
    this.relativeAddress = relativeAddress;
    return this;
  }

   /**
   * The address expressed as a byte offset from the absolute address of the top-most parent object.
   * @return relativeAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATIVE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRelativeAddress() {
    return relativeAddress;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelativeAddress(Integer relativeAddress) {
    this.relativeAddress = relativeAddress;
  }


  public Address length(Integer length) {
    this.length = length;
    return this;
  }

   /**
   * The number of bytes in this range of addresses.
   * @return length
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(Integer length) {
    this.length = length;
  }


  public Address kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * An open-ended string that identifies the address kind. &#39;data&#39;, &#39;function&#39;, &#39;header&#39;,&#39;instruction&#39;, &#39;module&#39;, &#39;page&#39;, &#39;section&#39;, &#39;segment&#39;, &#39;stack&#39;, &#39;stackFrame&#39;, &#39;table&#39; are well-known values.
   * @return kind
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKind(String kind) {
    this.kind = kind;
  }


  public Address name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A name that is associated with the address, e.g., &#39;.text&#39;.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Address fullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
    return this;
  }

   /**
   * A human-readable fully qualified name that is associated with the address.
   * @return fullyQualifiedName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullyQualifiedName() {
    return fullyQualifiedName;
  }


  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
  }


  public Address offsetFromParent(Integer offsetFromParent) {
    this.offsetFromParent = offsetFromParent;
    return this;
  }

   /**
   * The byte offset of this address from the absolute or relative address of the parent object.
   * @return offsetFromParent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET_FROM_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOffsetFromParent() {
    return offsetFromParent;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET_FROM_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffsetFromParent(Integer offsetFromParent) {
    this.offsetFromParent = offsetFromParent;
  }


  public Address index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * The index within run.addresses of the cached object for this address.
   * minimum: -1
   * @return index
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndex(Integer index) {
    this.index = index;
  }


  public Address parentIndex(Integer parentIndex) {
    this.parentIndex = parentIndex;
    return this;
  }

   /**
   * The index within run.addresses of the parent object.
   * minimum: -1
   * @return parentIndex
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getParentIndex() {
    return parentIndex;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentIndex(Integer parentIndex) {
    this.parentIndex = parentIndex;
  }


  public Address properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this address object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.absoluteAddress, address.absoluteAddress) &&
        Objects.equals(this.relativeAddress, address.relativeAddress) &&
        Objects.equals(this.length, address.length) &&
        Objects.equals(this.kind, address.kind) &&
        Objects.equals(this.name, address.name) &&
        Objects.equals(this.fullyQualifiedName, address.fullyQualifiedName) &&
        Objects.equals(this.offsetFromParent, address.offsetFromParent) &&
        Objects.equals(this.index, address.index) &&
        Objects.equals(this.parentIndex, address.parentIndex) &&
        Objects.equals(this.properties, address.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteAddress, relativeAddress, length, kind, name, fullyQualifiedName, offsetFromParent, index, parentIndex, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    absoluteAddress: ").append(toIndentedString(absoluteAddress)).append("\n");
    sb.append("    relativeAddress: ").append(toIndentedString(relativeAddress)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullyQualifiedName: ").append(toIndentedString(fullyQualifiedName)).append("\n");
    sb.append("    offsetFromParent: ").append(toIndentedString(offsetFromParent)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    parentIndex: ").append(toIndentedString(parentIndex)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `absoluteAddress` to the URL query string
    if (getAbsoluteAddress() != null) {
      joiner.add(String.format("%sabsoluteAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAbsoluteAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `relativeAddress` to the URL query string
    if (getRelativeAddress() != null) {
      joiner.add(String.format("%srelativeAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRelativeAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `length` to the URL query string
    if (getLength() != null) {
      joiner.add(String.format("%slength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kind` to the URL query string
    if (getKind() != null) {
      joiner.add(String.format("%skind%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKind()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fullyQualifiedName` to the URL query string
    if (getFullyQualifiedName() != null) {
      joiner.add(String.format("%sfullyQualifiedName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFullyQualifiedName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `offsetFromParent` to the URL query string
    if (getOffsetFromParent() != null) {
      joiner.add(String.format("%soffsetFromParent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOffsetFromParent()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `index` to the URL query string
    if (getIndex() != null) {
      joiner.add(String.format("%sindex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `parentIndex` to the URL query string
    if (getParentIndex() != null) {
      joiner.add(String.format("%sparentIndex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

