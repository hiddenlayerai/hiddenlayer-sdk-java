/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.hiddenlayer.sdk.rest.models.ArtifactLocation;
import com.hiddenlayer.sdk.rest.models.Attachment;
import com.hiddenlayer.sdk.rest.models.CodeFlow;
import com.hiddenlayer.sdk.rest.models.Fix;
import com.hiddenlayer.sdk.rest.models.Graph;
import com.hiddenlayer.sdk.rest.models.GraphTraversal;
import com.hiddenlayer.sdk.rest.models.Location;
import com.hiddenlayer.sdk.rest.models.Message;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import com.hiddenlayer.sdk.rest.models.ReportingDescriptorReference;
import com.hiddenlayer.sdk.rest.models.ResultProvenance;
import com.hiddenlayer.sdk.rest.models.Stack;
import com.hiddenlayer.sdk.rest.models.Suppression;
import com.hiddenlayer.sdk.rest.models.WebRequest;
import com.hiddenlayer.sdk.rest.models.WebResponse;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A result produced by an analysis tool.
 */
@JsonPropertyOrder({
  Result.JSON_PROPERTY_RULE_ID,
  Result.JSON_PROPERTY_RULE_INDEX,
  Result.JSON_PROPERTY_RULE,
  Result.JSON_PROPERTY_KIND,
  Result.JSON_PROPERTY_LEVEL,
  Result.JSON_PROPERTY_MESSAGE,
  Result.JSON_PROPERTY_ANALYSIS_TARGET,
  Result.JSON_PROPERTY_LOCATIONS,
  Result.JSON_PROPERTY_GUID,
  Result.JSON_PROPERTY_CORRELATION_GUID,
  Result.JSON_PROPERTY_OCCURRENCE_COUNT,
  Result.JSON_PROPERTY_PARTIAL_FINGERPRINTS,
  Result.JSON_PROPERTY_FINGERPRINTS,
  Result.JSON_PROPERTY_STACKS,
  Result.JSON_PROPERTY_CODE_FLOWS,
  Result.JSON_PROPERTY_GRAPHS,
  Result.JSON_PROPERTY_GRAPH_TRAVERSALS,
  Result.JSON_PROPERTY_RELATED_LOCATIONS,
  Result.JSON_PROPERTY_SUPPRESSIONS,
  Result.JSON_PROPERTY_BASELINE_STATE,
  Result.JSON_PROPERTY_RANK,
  Result.JSON_PROPERTY_ATTACHMENTS,
  Result.JSON_PROPERTY_HOSTED_VIEWER_URI,
  Result.JSON_PROPERTY_WORK_ITEM_URIS,
  Result.JSON_PROPERTY_PROVENANCE,
  Result.JSON_PROPERTY_FIXES,
  Result.JSON_PROPERTY_TAXA,
  Result.JSON_PROPERTY_WEB_REQUEST,
  Result.JSON_PROPERTY_WEB_RESPONSE,
  Result.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T18:04:47.686514Z[GMT]", comments = "Generator version: 7.6.0")
public class Result {
  public static final String JSON_PROPERTY_RULE_ID = "ruleId";
  private String ruleId;

  public static final String JSON_PROPERTY_RULE_INDEX = "ruleIndex";
  private Integer ruleIndex = -1;

  public static final String JSON_PROPERTY_RULE = "rule";
  private JsonNullable<ReportingDescriptorReference> rule = JsonNullable.<ReportingDescriptorReference>undefined();

  /**
   * A value that categorizes results by evaluation state.
   */
  public enum KindEnum {
    NOTAPPLICABLE("notApplicable"),
    
    PASS("pass"),
    
    FAIL("fail"),
    
    REVIEW("review"),
    
    OPEN("open"),
    
    INFORMATIONAL("informational");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KIND = "kind";
  private KindEnum kind = KindEnum.FAIL;

  /**
   * A value specifying the severity level of the result.
   */
  public enum LevelEnum {
    NONE("none"),
    
    NOTE("note"),
    
    WARNING("warning"),
    
    ERROR("error");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LEVEL = "level";
  private LevelEnum level = LevelEnum.WARNING;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private Message message;

  public static final String JSON_PROPERTY_ANALYSIS_TARGET = "analysisTarget";
  private ArtifactLocation analysisTarget;

  public static final String JSON_PROPERTY_LOCATIONS = "locations";
  private List<Location> locations = new ArrayList<>();

  public static final String JSON_PROPERTY_GUID = "guid";
  private String guid;

  public static final String JSON_PROPERTY_CORRELATION_GUID = "correlationGuid";
  private String correlationGuid;

  public static final String JSON_PROPERTY_OCCURRENCE_COUNT = "occurrenceCount";
  private Integer occurrenceCount;

  public static final String JSON_PROPERTY_PARTIAL_FINGERPRINTS = "partialFingerprints";
  private Map<String, String> partialFingerprints = new HashMap<>();

  public static final String JSON_PROPERTY_FINGERPRINTS = "fingerprints";
  private Map<String, String> fingerprints = new HashMap<>();

  public static final String JSON_PROPERTY_STACKS = "stacks";
  private Set<Stack> stacks = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_CODE_FLOWS = "codeFlows";
  private List<CodeFlow> codeFlows = new ArrayList<>();

  public static final String JSON_PROPERTY_GRAPHS = "graphs";
  private Set<Graph> graphs = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_GRAPH_TRAVERSALS = "graphTraversals";
  private Set<GraphTraversal> graphTraversals = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_RELATED_LOCATIONS = "relatedLocations";
  private Set<Location> relatedLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_SUPPRESSIONS = "suppressions";
  private Set<Suppression> suppressions = new LinkedHashSet<>();

  /**
   * The state of a result relative to a baseline of a previous run.
   */
  public enum BaselineStateEnum {
    NEW("new"),
    
    UNCHANGED("unchanged"),
    
    UPDATED("updated"),
    
    ABSENT("absent");

    private String value;

    BaselineStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BaselineStateEnum fromValue(String value) {
      for (BaselineStateEnum b : BaselineStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BASELINE_STATE = "baselineState";
  private BaselineStateEnum baselineState;

  public static final String JSON_PROPERTY_RANK = "rank";
  private BigDecimal rank = new BigDecimal("-1");

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private Set<Attachment> attachments = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_HOSTED_VIEWER_URI = "hostedViewerUri";
  private URI hostedViewerUri;

  public static final String JSON_PROPERTY_WORK_ITEM_URIS = "workItemUris";
  private Set<URI> workItemUris = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_PROVENANCE = "provenance";
  private ResultProvenance provenance;

  public static final String JSON_PROPERTY_FIXES = "fixes";
  private Set<Fix> fixes = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TAXA = "taxa";
  private Set<ReportingDescriptorReference> taxa = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_WEB_REQUEST = "webRequest";
  private WebRequest webRequest;

  public static final String JSON_PROPERTY_WEB_RESPONSE = "webResponse";
  private WebResponse webResponse;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Result() { 
  }

  public Result ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

   /**
   * The stable, unique identifier of the rule, if any, to which this result is relevant.
   * @return ruleId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRuleId() {
    return ruleId;
  }


  @JsonProperty(JSON_PROPERTY_RULE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public Result ruleIndex(Integer ruleIndex) {
    this.ruleIndex = ruleIndex;
    return this;
  }

   /**
   * The index within the tool component rules array of the rule object associated with this result.
   * minimum: -1
   * @return ruleIndex
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRuleIndex() {
    return ruleIndex;
  }


  @JsonProperty(JSON_PROPERTY_RULE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuleIndex(Integer ruleIndex) {
    this.ruleIndex = ruleIndex;
  }


  public Result rule(ReportingDescriptorReference rule) {
    this.rule = JsonNullable.<ReportingDescriptorReference>of(rule);
    return this;
  }

   /**
   * Get rule
   * @return rule
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public ReportingDescriptorReference getRule() {
        return rule.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ReportingDescriptorReference> getRule_JsonNullable() {
    return rule;
  }
  
  @JsonProperty(JSON_PROPERTY_RULE)
  public void setRule_JsonNullable(JsonNullable<ReportingDescriptorReference> rule) {
    this.rule = rule;
  }

  public void setRule(ReportingDescriptorReference rule) {
    this.rule = JsonNullable.<ReportingDescriptorReference>of(rule);
  }


  public Result kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * A value that categorizes results by evaluation state.
   * @return kind
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KindEnum getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public Result level(LevelEnum level) {
    this.level = level;
    return this;
  }

   /**
   * A value specifying the severity level of the result.
   * @return level
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LevelEnum getLevel() {
    return level;
  }


  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public Result message(Message message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Message getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(Message message) {
    this.message = message;
  }


  public Result analysisTarget(ArtifactLocation analysisTarget) {
    this.analysisTarget = analysisTarget;
    return this;
  }

   /**
   * Get analysisTarget
   * @return analysisTarget
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANALYSIS_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getAnalysisTarget() {
    return analysisTarget;
  }


  @JsonProperty(JSON_PROPERTY_ANALYSIS_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnalysisTarget(ArtifactLocation analysisTarget) {
    this.analysisTarget = analysisTarget;
  }


  public Result locations(List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public Result addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * The set of locations where the result was detected. Specify only one location unless the problem indicated by the result can only be corrected by making a change at every specified location.
   * @return locations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Location> getLocations() {
    return locations;
  }


  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }


  public Result guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * A stable, unique identifier for the result in the form of a GUID.
   * @return guid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGuid() {
    return guid;
  }


  @JsonProperty(JSON_PROPERTY_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuid(String guid) {
    this.guid = guid;
  }


  public Result correlationGuid(String correlationGuid) {
    this.correlationGuid = correlationGuid;
    return this;
  }

   /**
   * A stable, unique identifier for the equivalence class of logically identical results to which this result belongs, in the form of a GUID.
   * @return correlationGuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CORRELATION_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCorrelationGuid() {
    return correlationGuid;
  }


  @JsonProperty(JSON_PROPERTY_CORRELATION_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCorrelationGuid(String correlationGuid) {
    this.correlationGuid = correlationGuid;
  }


  public Result occurrenceCount(Integer occurrenceCount) {
    this.occurrenceCount = occurrenceCount;
    return this;
  }

   /**
   * A positive integer specifying the number of times this logically unique result was observed in this run.
   * minimum: 1
   * @return occurrenceCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OCCURRENCE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOccurrenceCount() {
    return occurrenceCount;
  }


  @JsonProperty(JSON_PROPERTY_OCCURRENCE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOccurrenceCount(Integer occurrenceCount) {
    this.occurrenceCount = occurrenceCount;
  }


  public Result partialFingerprints(Map<String, String> partialFingerprints) {
    this.partialFingerprints = partialFingerprints;
    return this;
  }

  public Result putPartialFingerprintsItem(String key, String partialFingerprintsItem) {
    if (this.partialFingerprints == null) {
      this.partialFingerprints = new HashMap<>();
    }
    this.partialFingerprints.put(key, partialFingerprintsItem);
    return this;
  }

   /**
   * A set of strings that contribute to the stable, unique identity of the result.
   * @return partialFingerprints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTIAL_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getPartialFingerprints() {
    return partialFingerprints;
  }


  @JsonProperty(JSON_PROPERTY_PARTIAL_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPartialFingerprints(Map<String, String> partialFingerprints) {
    this.partialFingerprints = partialFingerprints;
  }


  public Result fingerprints(Map<String, String> fingerprints) {
    this.fingerprints = fingerprints;
    return this;
  }

  public Result putFingerprintsItem(String key, String fingerprintsItem) {
    if (this.fingerprints == null) {
      this.fingerprints = new HashMap<>();
    }
    this.fingerprints.put(key, fingerprintsItem);
    return this;
  }

   /**
   * A set of strings each of which individually defines a stable, unique identity for the result.
   * @return fingerprints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getFingerprints() {
    return fingerprints;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprints(Map<String, String> fingerprints) {
    this.fingerprints = fingerprints;
  }


  public Result stacks(Set<Stack> stacks) {
    this.stacks = stacks;
    return this;
  }

  public Result addStacksItem(Stack stacksItem) {
    if (this.stacks == null) {
      this.stacks = new LinkedHashSet<>();
    }
    this.stacks.add(stacksItem);
    return this;
  }

   /**
   * An array of &#39;stack&#39; objects relevant to the result.
   * @return stacks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STACKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Stack> getStacks() {
    return stacks;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_STACKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStacks(Set<Stack> stacks) {
    this.stacks = stacks;
  }


  public Result codeFlows(List<CodeFlow> codeFlows) {
    this.codeFlows = codeFlows;
    return this;
  }

  public Result addCodeFlowsItem(CodeFlow codeFlowsItem) {
    if (this.codeFlows == null) {
      this.codeFlows = new ArrayList<>();
    }
    this.codeFlows.add(codeFlowsItem);
    return this;
  }

   /**
   * An array of &#39;codeFlow&#39; objects relevant to the result.
   * @return codeFlows
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_FLOWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CodeFlow> getCodeFlows() {
    return codeFlows;
  }


  @JsonProperty(JSON_PROPERTY_CODE_FLOWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeFlows(List<CodeFlow> codeFlows) {
    this.codeFlows = codeFlows;
  }


  public Result graphs(Set<Graph> graphs) {
    this.graphs = graphs;
    return this;
  }

  public Result addGraphsItem(Graph graphsItem) {
    if (this.graphs == null) {
      this.graphs = new LinkedHashSet<>();
    }
    this.graphs.add(graphsItem);
    return this;
  }

   /**
   * An array of zero or more unique graph objects associated with the result.
   * @return graphs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Graph> getGraphs() {
    return graphs;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphs(Set<Graph> graphs) {
    this.graphs = graphs;
  }


  public Result graphTraversals(Set<GraphTraversal> graphTraversals) {
    this.graphTraversals = graphTraversals;
    return this;
  }

  public Result addGraphTraversalsItem(GraphTraversal graphTraversalsItem) {
    if (this.graphTraversals == null) {
      this.graphTraversals = new LinkedHashSet<>();
    }
    this.graphTraversals.add(graphTraversalsItem);
    return this;
  }

   /**
   * An array of one or more unique &#39;graphTraversal&#39; objects.
   * @return graphTraversals
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRAPH_TRAVERSALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<GraphTraversal> getGraphTraversals() {
    return graphTraversals;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_GRAPH_TRAVERSALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphTraversals(Set<GraphTraversal> graphTraversals) {
    this.graphTraversals = graphTraversals;
  }


  public Result relatedLocations(Set<Location> relatedLocations) {
    this.relatedLocations = relatedLocations;
    return this;
  }

  public Result addRelatedLocationsItem(Location relatedLocationsItem) {
    if (this.relatedLocations == null) {
      this.relatedLocations = new LinkedHashSet<>();
    }
    this.relatedLocations.add(relatedLocationsItem);
    return this;
  }

   /**
   * A set of locations relevant to this result.
   * @return relatedLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATED_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Location> getRelatedLocations() {
    return relatedLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RELATED_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelatedLocations(Set<Location> relatedLocations) {
    this.relatedLocations = relatedLocations;
  }


  public Result suppressions(Set<Suppression> suppressions) {
    this.suppressions = suppressions;
    return this;
  }

  public Result addSuppressionsItem(Suppression suppressionsItem) {
    if (this.suppressions == null) {
      this.suppressions = new LinkedHashSet<>();
    }
    this.suppressions.add(suppressionsItem);
    return this;
  }

   /**
   * A set of suppressions relevant to this result.
   * @return suppressions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPRESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Suppression> getSuppressions() {
    return suppressions;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SUPPRESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuppressions(Set<Suppression> suppressions) {
    this.suppressions = suppressions;
  }


  public Result baselineState(BaselineStateEnum baselineState) {
    this.baselineState = baselineState;
    return this;
  }

   /**
   * The state of a result relative to a baseline of a previous run.
   * @return baselineState
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASELINE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BaselineStateEnum getBaselineState() {
    return baselineState;
  }


  @JsonProperty(JSON_PROPERTY_BASELINE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaselineState(BaselineStateEnum baselineState) {
    this.baselineState = baselineState;
  }


  public Result rank(BigDecimal rank) {
    this.rank = rank;
    return this;
  }

   /**
   * A number representing the priority or importance of the result.
   * minimum: -1
   * maximum: 100
   * @return rank
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRank() {
    return rank;
  }


  @JsonProperty(JSON_PROPERTY_RANK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRank(BigDecimal rank) {
    this.rank = rank;
  }


  public Result attachments(Set<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Result addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new LinkedHashSet<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * A set of artifacts relevant to the result.
   * @return attachments
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Attachment> getAttachments() {
    return attachments;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachments(Set<Attachment> attachments) {
    this.attachments = attachments;
  }


  public Result hostedViewerUri(URI hostedViewerUri) {
    this.hostedViewerUri = hostedViewerUri;
    return this;
  }

   /**
   * An absolute URI at which the result can be viewed.
   * @return hostedViewerUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOSTED_VIEWER_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHostedViewerUri() {
    return hostedViewerUri;
  }


  @JsonProperty(JSON_PROPERTY_HOSTED_VIEWER_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostedViewerUri(URI hostedViewerUri) {
    this.hostedViewerUri = hostedViewerUri;
  }


  public Result workItemUris(Set<URI> workItemUris) {
    this.workItemUris = workItemUris;
    return this;
  }

  public Result addWorkItemUrisItem(URI workItemUrisItem) {
    if (this.workItemUris == null) {
      this.workItemUris = new LinkedHashSet<>();
    }
    this.workItemUris.add(workItemUrisItem);
    return this;
  }

   /**
   * The URIs of the work items associated with this result.
   * @return workItemUris
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_URIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<URI> getWorkItemUris() {
    return workItemUris;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_WORK_ITEM_URIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkItemUris(Set<URI> workItemUris) {
    this.workItemUris = workItemUris;
  }


  public Result provenance(ResultProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResultProvenance getProvenance() {
    return provenance;
  }


  @JsonProperty(JSON_PROPERTY_PROVENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProvenance(ResultProvenance provenance) {
    this.provenance = provenance;
  }


  public Result fixes(Set<Fix> fixes) {
    this.fixes = fixes;
    return this;
  }

  public Result addFixesItem(Fix fixesItem) {
    if (this.fixes == null) {
      this.fixes = new LinkedHashSet<>();
    }
    this.fixes.add(fixesItem);
    return this;
  }

   /**
   * An array of &#39;fix&#39; objects, each of which represents a proposed fix to the problem indicated by the result.
   * @return fixes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Fix> getFixes() {
    return fixes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_FIXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixes(Set<Fix> fixes) {
    this.fixes = fixes;
  }


  public Result taxa(Set<ReportingDescriptorReference> taxa) {
    this.taxa = taxa;
    return this;
  }

  public Result addTaxaItem(ReportingDescriptorReference taxaItem) {
    if (this.taxa == null) {
      this.taxa = new LinkedHashSet<>();
    }
    this.taxa.add(taxaItem);
    return this;
  }

   /**
   * An array of references to taxonomy reporting descriptors that are applicable to the result.
   * @return taxa
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ReportingDescriptorReference> getTaxa() {
    return taxa;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAXA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxa(Set<ReportingDescriptorReference> taxa) {
    this.taxa = taxa;
  }


  public Result webRequest(WebRequest webRequest) {
    this.webRequest = webRequest;
    return this;
  }

   /**
   * Get webRequest
   * @return webRequest
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebRequest getWebRequest() {
    return webRequest;
  }


  @JsonProperty(JSON_PROPERTY_WEB_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebRequest(WebRequest webRequest) {
    this.webRequest = webRequest;
  }


  public Result webResponse(WebResponse webResponse) {
    this.webResponse = webResponse;
    return this;
  }

   /**
   * Get webResponse
   * @return webResponse
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebResponse getWebResponse() {
    return webResponse;
  }


  @JsonProperty(JSON_PROPERTY_WEB_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebResponse(WebResponse webResponse) {
    this.webResponse = webResponse;
  }


  public Result properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this result object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result result = (Result) o;
    return Objects.equals(this.ruleId, result.ruleId) &&
        Objects.equals(this.ruleIndex, result.ruleIndex) &&
        equalsNullable(this.rule, result.rule) &&
        Objects.equals(this.kind, result.kind) &&
        Objects.equals(this.level, result.level) &&
        Objects.equals(this.message, result.message) &&
        Objects.equals(this.analysisTarget, result.analysisTarget) &&
        Objects.equals(this.locations, result.locations) &&
        Objects.equals(this.guid, result.guid) &&
        Objects.equals(this.correlationGuid, result.correlationGuid) &&
        Objects.equals(this.occurrenceCount, result.occurrenceCount) &&
        Objects.equals(this.partialFingerprints, result.partialFingerprints) &&
        Objects.equals(this.fingerprints, result.fingerprints) &&
        Objects.equals(this.stacks, result.stacks) &&
        Objects.equals(this.codeFlows, result.codeFlows) &&
        Objects.equals(this.graphs, result.graphs) &&
        Objects.equals(this.graphTraversals, result.graphTraversals) &&
        Objects.equals(this.relatedLocations, result.relatedLocations) &&
        Objects.equals(this.suppressions, result.suppressions) &&
        Objects.equals(this.baselineState, result.baselineState) &&
        Objects.equals(this.rank, result.rank) &&
        Objects.equals(this.attachments, result.attachments) &&
        Objects.equals(this.hostedViewerUri, result.hostedViewerUri) &&
        Objects.equals(this.workItemUris, result.workItemUris) &&
        Objects.equals(this.provenance, result.provenance) &&
        Objects.equals(this.fixes, result.fixes) &&
        Objects.equals(this.taxa, result.taxa) &&
        Objects.equals(this.webRequest, result.webRequest) &&
        Objects.equals(this.webResponse, result.webResponse) &&
        Objects.equals(this.properties, result.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ruleIndex, hashCodeNullable(rule), kind, level, message, analysisTarget, locations, guid, correlationGuid, occurrenceCount, partialFingerprints, fingerprints, stacks, codeFlows, graphs, graphTraversals, relatedLocations, suppressions, baselineState, rank, attachments, hostedViewerUri, workItemUris, provenance, fixes, taxa, webRequest, webResponse, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleIndex: ").append(toIndentedString(ruleIndex)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    analysisTarget: ").append(toIndentedString(analysisTarget)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    correlationGuid: ").append(toIndentedString(correlationGuid)).append("\n");
    sb.append("    occurrenceCount: ").append(toIndentedString(occurrenceCount)).append("\n");
    sb.append("    partialFingerprints: ").append(toIndentedString(partialFingerprints)).append("\n");
    sb.append("    fingerprints: ").append(toIndentedString(fingerprints)).append("\n");
    sb.append("    stacks: ").append(toIndentedString(stacks)).append("\n");
    sb.append("    codeFlows: ").append(toIndentedString(codeFlows)).append("\n");
    sb.append("    graphs: ").append(toIndentedString(graphs)).append("\n");
    sb.append("    graphTraversals: ").append(toIndentedString(graphTraversals)).append("\n");
    sb.append("    relatedLocations: ").append(toIndentedString(relatedLocations)).append("\n");
    sb.append("    suppressions: ").append(toIndentedString(suppressions)).append("\n");
    sb.append("    baselineState: ").append(toIndentedString(baselineState)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    hostedViewerUri: ").append(toIndentedString(hostedViewerUri)).append("\n");
    sb.append("    workItemUris: ").append(toIndentedString(workItemUris)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    fixes: ").append(toIndentedString(fixes)).append("\n");
    sb.append("    taxa: ").append(toIndentedString(taxa)).append("\n");
    sb.append("    webRequest: ").append(toIndentedString(webRequest)).append("\n");
    sb.append("    webResponse: ").append(toIndentedString(webResponse)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ruleId` to the URL query string
    if (getRuleId() != null) {
      joiner.add(String.format("%sruleId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRuleId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ruleIndex` to the URL query string
    if (getRuleIndex() != null) {
      joiner.add(String.format("%sruleIndex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRuleIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rule` to the URL query string
    if (getRule() != null) {
      joiner.add(getRule().toUrlQueryString(prefix + "rule" + suffix));
    }

    // add `kind` to the URL query string
    if (getKind() != null) {
      joiner.add(String.format("%skind%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKind()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `level` to the URL query string
    if (getLevel() != null) {
      joiner.add(String.format("%slevel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLevel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      joiner.add(getMessage().toUrlQueryString(prefix + "message" + suffix));
    }

    // add `analysisTarget` to the URL query string
    if (getAnalysisTarget() != null) {
      joiner.add(getAnalysisTarget().toUrlQueryString(prefix + "analysisTarget" + suffix));
    }

    // add `locations` to the URL query string
    if (getLocations() != null) {
      for (int i = 0; i < getLocations().size(); i++) {
        if (getLocations().get(i) != null) {
          joiner.add(getLocations().get(i).toUrlQueryString(String.format("%slocations%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `guid` to the URL query string
    if (getGuid() != null) {
      joiner.add(String.format("%sguid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `correlationGuid` to the URL query string
    if (getCorrelationGuid() != null) {
      joiner.add(String.format("%scorrelationGuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCorrelationGuid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `occurrenceCount` to the URL query string
    if (getOccurrenceCount() != null) {
      joiner.add(String.format("%soccurrenceCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOccurrenceCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `partialFingerprints` to the URL query string
    if (getPartialFingerprints() != null) {
      for (String _key : getPartialFingerprints().keySet()) {
        joiner.add(String.format("%spartialFingerprints%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getPartialFingerprints().get(_key), URLEncoder.encode(String.valueOf(getPartialFingerprints().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `fingerprints` to the URL query string
    if (getFingerprints() != null) {
      for (String _key : getFingerprints().keySet()) {
        joiner.add(String.format("%sfingerprints%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getFingerprints().get(_key), URLEncoder.encode(String.valueOf(getFingerprints().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `stacks` to the URL query string
    if (getStacks() != null) {
      int i = 0;
      for (Stack _item : getStacks()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sstacks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `codeFlows` to the URL query string
    if (getCodeFlows() != null) {
      for (int i = 0; i < getCodeFlows().size(); i++) {
        if (getCodeFlows().get(i) != null) {
          joiner.add(getCodeFlows().get(i).toUrlQueryString(String.format("%scodeFlows%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `graphs` to the URL query string
    if (getGraphs() != null) {
      int i = 0;
      for (Graph _item : getGraphs()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sgraphs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `graphTraversals` to the URL query string
    if (getGraphTraversals() != null) {
      int i = 0;
      for (GraphTraversal _item : getGraphTraversals()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sgraphTraversals%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `relatedLocations` to the URL query string
    if (getRelatedLocations() != null) {
      int i = 0;
      for (Location _item : getRelatedLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%srelatedLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `suppressions` to the URL query string
    if (getSuppressions() != null) {
      int i = 0;
      for (Suppression _item : getSuppressions()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%ssuppressions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `baselineState` to the URL query string
    if (getBaselineState() != null) {
      joiner.add(String.format("%sbaselineState%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaselineState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rank` to the URL query string
    if (getRank() != null) {
      joiner.add(String.format("%srank%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRank()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `attachments` to the URL query string
    if (getAttachments() != null) {
      int i = 0;
      for (Attachment _item : getAttachments()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sattachments%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `hostedViewerUri` to the URL query string
    if (getHostedViewerUri() != null) {
      joiner.add(String.format("%shostedViewerUri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHostedViewerUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `workItemUris` to the URL query string
    if (getWorkItemUris() != null) {
      int i = 0;
      for (URI _item : getWorkItemUris()) {
        if (_item != null) {
          joiner.add(String.format("%sworkItemUris%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
        i++;
      }
    }

    // add `provenance` to the URL query string
    if (getProvenance() != null) {
      joiner.add(getProvenance().toUrlQueryString(prefix + "provenance" + suffix));
    }

    // add `fixes` to the URL query string
    if (getFixes() != null) {
      int i = 0;
      for (Fix _item : getFixes()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sfixes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `taxa` to the URL query string
    if (getTaxa() != null) {
      int i = 0;
      for (ReportingDescriptorReference _item : getTaxa()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%staxa%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `webRequest` to the URL query string
    if (getWebRequest() != null) {
      joiner.add(getWebRequest().toUrlQueryString(prefix + "webRequest" + suffix));
    }

    // add `webResponse` to the URL query string
    if (getWebResponse() != null) {
      joiner.add(getWebResponse().toUrlQueryString(prefix + "webResponse" + suffix));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

