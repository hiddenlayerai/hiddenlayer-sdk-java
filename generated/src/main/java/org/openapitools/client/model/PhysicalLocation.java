/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ArtifactLocation;
import org.openapitools.client.model.PropertyBag;
import org.openapitools.client.model.Region;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A physical location relevant to a result. Specifies a reference to a programming artifact together with a range of bytes or characters within that artifact.
 */
@JsonPropertyOrder({
  PhysicalLocation.JSON_PROPERTY_ADDRESS,
  PhysicalLocation.JSON_PROPERTY_ARTIFACT_LOCATION,
  PhysicalLocation.JSON_PROPERTY_REGION,
  PhysicalLocation.JSON_PROPERTY_CONTEXT_REGION,
  PhysicalLocation.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-17T20:22:10.182839Z[GMT]", comments = "Generator version: 7.6.0")
public class PhysicalLocation {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  private Address address;

  public static final String JSON_PROPERTY_ARTIFACT_LOCATION = "artifactLocation";
  private ArtifactLocation artifactLocation;

  public static final String JSON_PROPERTY_REGION = "region";
  private Region region;

  public static final String JSON_PROPERTY_CONTEXT_REGION = "contextRegion";
  private Region contextRegion;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public PhysicalLocation() { 
  }

  public PhysicalLocation address(Address address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Address getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(Address address) {
    this.address = address;
  }


  public PhysicalLocation artifactLocation(ArtifactLocation artifactLocation) {
    this.artifactLocation = artifactLocation;
    return this;
  }

   /**
   * Get artifactLocation
   * @return artifactLocation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARTIFACT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getArtifactLocation() {
    return artifactLocation;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactLocation(ArtifactLocation artifactLocation) {
    this.artifactLocation = artifactLocation;
  }


  public PhysicalLocation region(Region region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Region getRegion() {
    return region;
  }


  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegion(Region region) {
    this.region = region;
  }


  public PhysicalLocation contextRegion(Region contextRegion) {
    this.contextRegion = contextRegion;
    return this;
  }

   /**
   * Get contextRegion
   * @return contextRegion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Region getContextRegion() {
    return contextRegion;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextRegion(Region contextRegion) {
    this.contextRegion = contextRegion;
  }


  public PhysicalLocation properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this physicalLocation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalLocation physicalLocation = (PhysicalLocation) o;
    return Objects.equals(this.address, physicalLocation.address) &&
        Objects.equals(this.artifactLocation, physicalLocation.artifactLocation) &&
        Objects.equals(this.region, physicalLocation.region) &&
        Objects.equals(this.contextRegion, physicalLocation.contextRegion) &&
        Objects.equals(this.properties, physicalLocation.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, artifactLocation, region, contextRegion, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalLocation {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    artifactLocation: ").append(toIndentedString(artifactLocation)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    contextRegion: ").append(toIndentedString(contextRegion)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    return joiner.toString();
  }
}

