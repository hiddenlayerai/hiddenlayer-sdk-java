/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ModelVersion
 */
@JsonPropertyOrder({
  ModelVersion.JSON_PROPERTY_MODEL_VERSION_ID,
  ModelVersion.JSON_PROPERTY_VERSION,
  ModelVersion.JSON_PROPERTY_TAGS,
  ModelVersion.JSON_PROPERTY_LOCATIONS,
  ModelVersion.JSON_PROPERTY_MULTI_FILE,
  ModelVersion.JSON_PROPERTY_RETRIEVABLE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-06T16:41:22.054858Z[GMT]", comments = "Generator version: 7.6.0")
public class ModelVersion {
  public static final String JSON_PROPERTY_MODEL_VERSION_ID = "model_version_id";
  private UUID modelVersionId;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Map<String, Object> tags = new HashMap<>();

  public static final String JSON_PROPERTY_LOCATIONS = "locations";
  private Map<String, Object> locations = new HashMap<>();

  public static final String JSON_PROPERTY_MULTI_FILE = "multi_file";
  private Boolean multiFile;

  public static final String JSON_PROPERTY_RETRIEVABLE = "retrievable";
  private Boolean retrievable;

  public ModelVersion() { 
  }

  public ModelVersion modelVersionId(UUID modelVersionId) {
    this.modelVersionId = modelVersionId;
    return this;
  }

   /**
   * Get modelVersionId
   * @return modelVersionId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getModelVersionId() {
    return modelVersionId;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_VERSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelVersionId(UUID modelVersionId) {
    this.modelVersionId = modelVersionId;
  }


  public ModelVersion version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
  }


  public ModelVersion tags(Map<String, Object> tags) {
    this.tags = tags;
    return this;
  }

  public ModelVersion putTagsItem(String key, Object tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(Map<String, Object> tags) {
    this.tags = tags;
  }


  public ModelVersion locations(Map<String, Object> locations) {
    this.locations = locations;
    return this;
  }

  public ModelVersion putLocationsItem(String key, Object locationsItem) {
    if (this.locations == null) {
      this.locations = new HashMap<>();
    }
    this.locations.put(key, locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getLocations() {
    return locations;
  }


  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocations(Map<String, Object> locations) {
    this.locations = locations;
  }


  public ModelVersion multiFile(Boolean multiFile) {
    this.multiFile = multiFile;
    return this;
  }

   /**
   * Get multiFile
   * @return multiFile
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMultiFile() {
    return multiFile;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiFile(Boolean multiFile) {
    this.multiFile = multiFile;
  }


  public ModelVersion retrievable(Boolean retrievable) {
    this.retrievable = retrievable;
    return this;
  }

   /**
   * Get retrievable
   * @return retrievable
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETRIEVABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRetrievable() {
    return retrievable;
  }


  @JsonProperty(JSON_PROPERTY_RETRIEVABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetrievable(Boolean retrievable) {
    this.retrievable = retrievable;
  }


  /**
   * Return true if this ModelVersion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelVersion modelVersion = (ModelVersion) o;
    return Objects.equals(this.modelVersionId, modelVersion.modelVersionId) &&
        Objects.equals(this.version, modelVersion.version) &&
        Objects.equals(this.tags, modelVersion.tags) &&
        Objects.equals(this.locations, modelVersion.locations) &&
        Objects.equals(this.multiFile, modelVersion.multiFile) &&
        Objects.equals(this.retrievable, modelVersion.retrievable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelVersionId, version, tags, locations, multiFile, retrievable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelVersion {\n");
    sb.append("    modelVersionId: ").append(toIndentedString(modelVersionId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    multiFile: ").append(toIndentedString(multiFile)).append("\n");
    sb.append("    retrievable: ").append(toIndentedString(retrievable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_version_id` to the URL query string
    if (getModelVersionId() != null) {
      joiner.add(String.format("%smodel_version_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelVersionId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      for (String _key : getTags().keySet()) {
        joiner.add(String.format("%stags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getTags().get(_key), URLEncoder.encode(String.valueOf(getTags().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `locations` to the URL query string
    if (getLocations() != null) {
      for (String _key : getLocations().keySet()) {
        joiner.add(String.format("%slocations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLocations().get(_key), URLEncoder.encode(String.valueOf(getLocations().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `multi_file` to the URL query string
    if (getMultiFile() != null) {
      joiner.add(String.format("%smulti_file%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMultiFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `retrievable` to the URL query string
    if (getRetrievable() != null) {
      joiner.add(String.format("%sretrievable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRetrievable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

