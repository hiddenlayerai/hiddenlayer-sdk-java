/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.hiddenlayer.sdk.rest.models.Address;
import com.hiddenlayer.sdk.rest.models.Artifact;
import com.hiddenlayer.sdk.rest.models.ArtifactLocation;
import com.hiddenlayer.sdk.rest.models.Conversion;
import com.hiddenlayer.sdk.rest.models.ExternalPropertyFileReferences;
import com.hiddenlayer.sdk.rest.models.Graph;
import com.hiddenlayer.sdk.rest.models.Invocation;
import com.hiddenlayer.sdk.rest.models.LogicalLocation;
import com.hiddenlayer.sdk.rest.models.PropertyBag;
import com.hiddenlayer.sdk.rest.models.Result;
import com.hiddenlayer.sdk.rest.models.RunAutomationDetails;
import com.hiddenlayer.sdk.rest.models.SpecialLocations;
import com.hiddenlayer.sdk.rest.models.ThreadFlowLocation;
import com.hiddenlayer.sdk.rest.models.Tool;
import com.hiddenlayer.sdk.rest.models.ToolComponent;
import com.hiddenlayer.sdk.rest.models.VersionControlDetails;
import com.hiddenlayer.sdk.rest.models.WebRequest;
import com.hiddenlayer.sdk.rest.models.WebResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Describes a single run of an analysis tool, and contains the reported output of that run.
 */
@JsonPropertyOrder({
  Run.JSON_PROPERTY_TOOL,
  Run.JSON_PROPERTY_INVOCATIONS,
  Run.JSON_PROPERTY_CONVERSION,
  Run.JSON_PROPERTY_LANGUAGE,
  Run.JSON_PROPERTY_VERSION_CONTROL_PROVENANCE,
  Run.JSON_PROPERTY_ORIGINAL_URI_BASE_IDS,
  Run.JSON_PROPERTY_ARTIFACTS,
  Run.JSON_PROPERTY_LOGICAL_LOCATIONS,
  Run.JSON_PROPERTY_GRAPHS,
  Run.JSON_PROPERTY_RESULTS,
  Run.JSON_PROPERTY_AUTOMATION_DETAILS,
  Run.JSON_PROPERTY_RUN_AGGREGATES,
  Run.JSON_PROPERTY_BASELINE_GUID,
  Run.JSON_PROPERTY_REDACTION_TOKENS,
  Run.JSON_PROPERTY_DEFAULT_ENCODING,
  Run.JSON_PROPERTY_DEFAULT_SOURCE_LANGUAGE,
  Run.JSON_PROPERTY_NEWLINE_SEQUENCES,
  Run.JSON_PROPERTY_COLUMN_KIND,
  Run.JSON_PROPERTY_EXTERNAL_PROPERTY_FILE_REFERENCES,
  Run.JSON_PROPERTY_THREAD_FLOW_LOCATIONS,
  Run.JSON_PROPERTY_TAXONOMIES,
  Run.JSON_PROPERTY_ADDRESSES,
  Run.JSON_PROPERTY_TRANSLATIONS,
  Run.JSON_PROPERTY_POLICIES,
  Run.JSON_PROPERTY_WEB_REQUESTS,
  Run.JSON_PROPERTY_WEB_RESPONSES,
  Run.JSON_PROPERTY_SPECIAL_LOCATIONS,
  Run.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-23T18:00:16.695354Z[GMT]", comments = "Generator version: 7.6.0")
public class Run {
  public static final String JSON_PROPERTY_TOOL = "tool";
  private Tool tool;

  public static final String JSON_PROPERTY_INVOCATIONS = "invocations";
  private List<Invocation> invocations = new ArrayList<>();

  public static final String JSON_PROPERTY_CONVERSION = "conversion";
  private Conversion conversion;

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private String language = "en-US";

  public static final String JSON_PROPERTY_VERSION_CONTROL_PROVENANCE = "versionControlProvenance";
  private Set<VersionControlDetails> versionControlProvenance = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_ORIGINAL_URI_BASE_IDS = "originalUriBaseIds";
  private Map<String, ArtifactLocation> originalUriBaseIds = new HashMap<>();

  public static final String JSON_PROPERTY_ARTIFACTS = "artifacts";
  private Set<Artifact> artifacts = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_LOGICAL_LOCATIONS = "logicalLocations";
  private Set<LogicalLocation> logicalLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_GRAPHS = "graphs";
  private Set<Graph> graphs = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_RESULTS = "results";
  private List<Result> results = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTOMATION_DETAILS = "automationDetails";
  private RunAutomationDetails automationDetails;

  public static final String JSON_PROPERTY_RUN_AGGREGATES = "runAggregates";
  private Set<RunAutomationDetails> runAggregates = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_BASELINE_GUID = "baselineGuid";
  private String baselineGuid;

  public static final String JSON_PROPERTY_REDACTION_TOKENS = "redactionTokens";
  private Set<String> redactionTokens = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_DEFAULT_ENCODING = "defaultEncoding";
  private String defaultEncoding;

  public static final String JSON_PROPERTY_DEFAULT_SOURCE_LANGUAGE = "defaultSourceLanguage";
  private String defaultSourceLanguage;

  public static final String JSON_PROPERTY_NEWLINE_SEQUENCES = "newlineSequences";
  private Set<String> newlineSequences = new LinkedHashSet<>(Arrays.asList("\n", "\r\n"));

  /**
   * Specifies the unit in which the tool measures columns.
   */
  public enum ColumnKindEnum {
    UTF16CODEUNITS("utf16CodeUnits"),
    
    UNICODECODEPOINTS("unicodeCodePoints");

    private String value;

    ColumnKindEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColumnKindEnum fromValue(String value) {
      for (ColumnKindEnum b : ColumnKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COLUMN_KIND = "columnKind";
  private ColumnKindEnum columnKind;

  public static final String JSON_PROPERTY_EXTERNAL_PROPERTY_FILE_REFERENCES = "externalPropertyFileReferences";
  private ExternalPropertyFileReferences externalPropertyFileReferences;

  public static final String JSON_PROPERTY_THREAD_FLOW_LOCATIONS = "threadFlowLocations";
  private Set<ThreadFlowLocation> threadFlowLocations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TAXONOMIES = "taxonomies";
  private Set<ToolComponent> taxonomies = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_ADDRESSES = "addresses";
  private List<Address> addresses = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSLATIONS = "translations";
  private Set<ToolComponent> translations = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_POLICIES = "policies";
  private Set<ToolComponent> policies = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_WEB_REQUESTS = "webRequests";
  private Set<WebRequest> webRequests = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_WEB_RESPONSES = "webResponses";
  private Set<WebResponse> webResponses = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_SPECIAL_LOCATIONS = "specialLocations";
  private SpecialLocations specialLocations;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Run() { 
  }

  public Run tool(Tool tool) {
    this.tool = tool;
    return this;
  }

   /**
   * Get tool
   * @return tool
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Tool getTool() {
    return tool;
  }


  @JsonProperty(JSON_PROPERTY_TOOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTool(Tool tool) {
    this.tool = tool;
  }


  public Run invocations(List<Invocation> invocations) {
    this.invocations = invocations;
    return this;
  }

  public Run addInvocationsItem(Invocation invocationsItem) {
    if (this.invocations == null) {
      this.invocations = new ArrayList<>();
    }
    this.invocations.add(invocationsItem);
    return this;
  }

   /**
   * Describes the invocation of the analysis tool.
   * @return invocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Invocation> getInvocations() {
    return invocations;
  }


  @JsonProperty(JSON_PROPERTY_INVOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvocations(List<Invocation> invocations) {
    this.invocations = invocations;
  }


  public Run conversion(Conversion conversion) {
    this.conversion = conversion;
    return this;
  }

   /**
   * Get conversion
   * @return conversion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Conversion getConversion() {
    return conversion;
  }


  @JsonProperty(JSON_PROPERTY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConversion(Conversion conversion) {
    this.conversion = conversion;
  }


  public Run language(String language) {
    this.language = language;
    return this;
  }

   /**
   * The language of the messages emitted into the log file during this run (expressed as an ISO 639-1 two-letter lowercase culture code) and an optional region (expressed as an ISO 3166-1 two-letter uppercase subculture code associated with a country or region). The casing is recommended but not required (in order for this data to conform to RFC5646).
   * @return language
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(String language) {
    this.language = language;
  }


  public Run versionControlProvenance(Set<VersionControlDetails> versionControlProvenance) {
    this.versionControlProvenance = versionControlProvenance;
    return this;
  }

  public Run addVersionControlProvenanceItem(VersionControlDetails versionControlProvenanceItem) {
    if (this.versionControlProvenance == null) {
      this.versionControlProvenance = new LinkedHashSet<>();
    }
    this.versionControlProvenance.add(versionControlProvenanceItem);
    return this;
  }

   /**
   * Specifies the revision in version control of the artifacts that were scanned.
   * @return versionControlProvenance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION_CONTROL_PROVENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<VersionControlDetails> getVersionControlProvenance() {
    return versionControlProvenance;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_VERSION_CONTROL_PROVENANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersionControlProvenance(Set<VersionControlDetails> versionControlProvenance) {
    this.versionControlProvenance = versionControlProvenance;
  }


  public Run originalUriBaseIds(Map<String, ArtifactLocation> originalUriBaseIds) {
    this.originalUriBaseIds = originalUriBaseIds;
    return this;
  }

  public Run putOriginalUriBaseIdsItem(String key, ArtifactLocation originalUriBaseIdsItem) {
    if (this.originalUriBaseIds == null) {
      this.originalUriBaseIds = new HashMap<>();
    }
    this.originalUriBaseIds.put(key, originalUriBaseIdsItem);
    return this;
  }

   /**
   * The artifact location specified by each uriBaseId symbol on the machine where the tool originally ran.
   * @return originalUriBaseIds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_URI_BASE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ArtifactLocation> getOriginalUriBaseIds() {
    return originalUriBaseIds;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_URI_BASE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalUriBaseIds(Map<String, ArtifactLocation> originalUriBaseIds) {
    this.originalUriBaseIds = originalUriBaseIds;
  }


  public Run artifacts(Set<Artifact> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public Run addArtifactsItem(Artifact artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new LinkedHashSet<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

   /**
   * An array of artifact objects relevant to the run.
   * @return artifacts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Artifact> getArtifacts() {
    return artifacts;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifacts(Set<Artifact> artifacts) {
    this.artifacts = artifacts;
  }


  public Run logicalLocations(Set<LogicalLocation> logicalLocations) {
    this.logicalLocations = logicalLocations;
    return this;
  }

  public Run addLogicalLocationsItem(LogicalLocation logicalLocationsItem) {
    if (this.logicalLocations == null) {
      this.logicalLocations = new LinkedHashSet<>();
    }
    this.logicalLocations.add(logicalLocationsItem);
    return this;
  }

   /**
   * An array of logical locations such as namespaces, types or functions.
   * @return logicalLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LogicalLocation> getLogicalLocations() {
    return logicalLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOGICAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogicalLocations(Set<LogicalLocation> logicalLocations) {
    this.logicalLocations = logicalLocations;
  }


  public Run graphs(Set<Graph> graphs) {
    this.graphs = graphs;
    return this;
  }

  public Run addGraphsItem(Graph graphsItem) {
    if (this.graphs == null) {
      this.graphs = new LinkedHashSet<>();
    }
    this.graphs.add(graphsItem);
    return this;
  }

   /**
   * An array of zero or more unique graph objects associated with the run.
   * @return graphs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Graph> getGraphs() {
    return graphs;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_GRAPHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphs(Set<Graph> graphs) {
    this.graphs = graphs;
  }


  public Run results(List<Result> results) {
    this.results = results;
    return this;
  }

  public Run addResultsItem(Result resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * The set of results contained in an SARIF log. The results array can be omitted when a run is solely exporting rules metadata. It must be present (but may be empty) if a log file represents an actual scan.
   * @return results
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Result> getResults() {
    return results;
  }


  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResults(List<Result> results) {
    this.results = results;
  }


  public Run automationDetails(RunAutomationDetails automationDetails) {
    this.automationDetails = automationDetails;
    return this;
  }

   /**
   * Get automationDetails
   * @return automationDetails
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTOMATION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RunAutomationDetails getAutomationDetails() {
    return automationDetails;
  }


  @JsonProperty(JSON_PROPERTY_AUTOMATION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutomationDetails(RunAutomationDetails automationDetails) {
    this.automationDetails = automationDetails;
  }


  public Run runAggregates(Set<RunAutomationDetails> runAggregates) {
    this.runAggregates = runAggregates;
    return this;
  }

  public Run addRunAggregatesItem(RunAutomationDetails runAggregatesItem) {
    if (this.runAggregates == null) {
      this.runAggregates = new LinkedHashSet<>();
    }
    this.runAggregates.add(runAggregatesItem);
    return this;
  }

   /**
   * Automation details that describe the aggregate of runs to which this run belongs.
   * @return runAggregates
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RUN_AGGREGATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<RunAutomationDetails> getRunAggregates() {
    return runAggregates;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RUN_AGGREGATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunAggregates(Set<RunAutomationDetails> runAggregates) {
    this.runAggregates = runAggregates;
  }


  public Run baselineGuid(String baselineGuid) {
    this.baselineGuid = baselineGuid;
    return this;
  }

   /**
   * The &#39;guid&#39; property of a previous SARIF &#39;run&#39; that comprises the baseline that was used to compute result &#39;baselineState&#39; properties for the run.
   * @return baselineGuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASELINE_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaselineGuid() {
    return baselineGuid;
  }


  @JsonProperty(JSON_PROPERTY_BASELINE_GUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaselineGuid(String baselineGuid) {
    this.baselineGuid = baselineGuid;
  }


  public Run redactionTokens(Set<String> redactionTokens) {
    this.redactionTokens = redactionTokens;
    return this;
  }

  public Run addRedactionTokensItem(String redactionTokensItem) {
    if (this.redactionTokens == null) {
      this.redactionTokens = new LinkedHashSet<>();
    }
    this.redactionTokens.add(redactionTokensItem);
    return this;
  }

   /**
   * An array of strings used to replace sensitive information in a redaction-aware property.
   * @return redactionTokens
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDACTION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getRedactionTokens() {
    return redactionTokens;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_REDACTION_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedactionTokens(Set<String> redactionTokens) {
    this.redactionTokens = redactionTokens;
  }


  public Run defaultEncoding(String defaultEncoding) {
    this.defaultEncoding = defaultEncoding;
    return this;
  }

   /**
   * Specifies the default encoding for any artifact object that refers to a text file.
   * @return defaultEncoding
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultEncoding() {
    return defaultEncoding;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultEncoding(String defaultEncoding) {
    this.defaultEncoding = defaultEncoding;
  }


  public Run defaultSourceLanguage(String defaultSourceLanguage) {
    this.defaultSourceLanguage = defaultSourceLanguage;
    return this;
  }

   /**
   * Specifies the default source language for any artifact object that refers to a text file that contains source code.
   * @return defaultSourceLanguage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_SOURCE_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultSourceLanguage() {
    return defaultSourceLanguage;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_SOURCE_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultSourceLanguage(String defaultSourceLanguage) {
    this.defaultSourceLanguage = defaultSourceLanguage;
  }


  public Run newlineSequences(Set<String> newlineSequences) {
    this.newlineSequences = newlineSequences;
    return this;
  }

  public Run addNewlineSequencesItem(String newlineSequencesItem) {
    if (this.newlineSequences == null) {
      this.newlineSequences = new LinkedHashSet<>(Arrays.asList("\n", "\r\n"));
    }
    this.newlineSequences.add(newlineSequencesItem);
    return this;
  }

   /**
   * An ordered list of character sequences that were treated as line breaks when computing region information for the run.
   * @return newlineSequences
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEWLINE_SEQUENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getNewlineSequences() {
    return newlineSequences;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_NEWLINE_SEQUENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewlineSequences(Set<String> newlineSequences) {
    this.newlineSequences = newlineSequences;
  }


  public Run columnKind(ColumnKindEnum columnKind) {
    this.columnKind = columnKind;
    return this;
  }

   /**
   * Specifies the unit in which the tool measures columns.
   * @return columnKind
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColumnKindEnum getColumnKind() {
    return columnKind;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnKind(ColumnKindEnum columnKind) {
    this.columnKind = columnKind;
  }


  public Run externalPropertyFileReferences(ExternalPropertyFileReferences externalPropertyFileReferences) {
    this.externalPropertyFileReferences = externalPropertyFileReferences;
    return this;
  }

   /**
   * Get externalPropertyFileReferences
   * @return externalPropertyFileReferences
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_PROPERTY_FILE_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExternalPropertyFileReferences getExternalPropertyFileReferences() {
    return externalPropertyFileReferences;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_PROPERTY_FILE_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalPropertyFileReferences(ExternalPropertyFileReferences externalPropertyFileReferences) {
    this.externalPropertyFileReferences = externalPropertyFileReferences;
  }


  public Run threadFlowLocations(Set<ThreadFlowLocation> threadFlowLocations) {
    this.threadFlowLocations = threadFlowLocations;
    return this;
  }

  public Run addThreadFlowLocationsItem(ThreadFlowLocation threadFlowLocationsItem) {
    if (this.threadFlowLocations == null) {
      this.threadFlowLocations = new LinkedHashSet<>();
    }
    this.threadFlowLocations.add(threadFlowLocationsItem);
    return this;
  }

   /**
   * An array of threadFlowLocation objects cached at run level.
   * @return threadFlowLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_FLOW_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ThreadFlowLocation> getThreadFlowLocations() {
    return threadFlowLocations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_THREAD_FLOW_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadFlowLocations(Set<ThreadFlowLocation> threadFlowLocations) {
    this.threadFlowLocations = threadFlowLocations;
  }


  public Run taxonomies(Set<ToolComponent> taxonomies) {
    this.taxonomies = taxonomies;
    return this;
  }

  public Run addTaxonomiesItem(ToolComponent taxonomiesItem) {
    if (this.taxonomies == null) {
      this.taxonomies = new LinkedHashSet<>();
    }
    this.taxonomies.add(taxonomiesItem);
    return this;
  }

   /**
   * An array of toolComponent objects relevant to a taxonomy in which results are categorized.
   * @return taxonomies
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ToolComponent> getTaxonomies() {
    return taxonomies;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TAXONOMIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomies(Set<ToolComponent> taxonomies) {
    this.taxonomies = taxonomies;
  }


  public Run addresses(List<Address> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Run addAddressesItem(Address addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Addresses associated with this run instance, if any.
   * @return addresses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Address> getAddresses() {
    return addresses;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddresses(List<Address> addresses) {
    this.addresses = addresses;
  }


  public Run translations(Set<ToolComponent> translations) {
    this.translations = translations;
    return this;
  }

  public Run addTranslationsItem(ToolComponent translationsItem) {
    if (this.translations == null) {
      this.translations = new LinkedHashSet<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * The set of available translations of the localized data provided by the tool.
   * @return translations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ToolComponent> getTranslations() {
    return translations;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranslations(Set<ToolComponent> translations) {
    this.translations = translations;
  }


  public Run policies(Set<ToolComponent> policies) {
    this.policies = policies;
    return this;
  }

  public Run addPoliciesItem(ToolComponent policiesItem) {
    if (this.policies == null) {
      this.policies = new LinkedHashSet<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Contains configurations that may potentially override both reportingDescriptor.defaultConfiguration (the tool&#39;s default severities) and invocation.configurationOverrides (severities established at run-time from the command line).
   * @return policies
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ToolComponent> getPolicies() {
    return policies;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_POLICIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicies(Set<ToolComponent> policies) {
    this.policies = policies;
  }


  public Run webRequests(Set<WebRequest> webRequests) {
    this.webRequests = webRequests;
    return this;
  }

  public Run addWebRequestsItem(WebRequest webRequestsItem) {
    if (this.webRequests == null) {
      this.webRequests = new LinkedHashSet<>();
    }
    this.webRequests.add(webRequestsItem);
    return this;
  }

   /**
   * An array of request objects cached at run level.
   * @return webRequests
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<WebRequest> getWebRequests() {
    return webRequests;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_WEB_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebRequests(Set<WebRequest> webRequests) {
    this.webRequests = webRequests;
  }


  public Run webResponses(Set<WebResponse> webResponses) {
    this.webResponses = webResponses;
    return this;
  }

  public Run addWebResponsesItem(WebResponse webResponsesItem) {
    if (this.webResponses == null) {
      this.webResponses = new LinkedHashSet<>();
    }
    this.webResponses.add(webResponsesItem);
    return this;
  }

   /**
   * An array of response objects cached at run level.
   * @return webResponses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_RESPONSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<WebResponse> getWebResponses() {
    return webResponses;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_WEB_RESPONSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebResponses(Set<WebResponse> webResponses) {
    this.webResponses = webResponses;
  }


  public Run specialLocations(SpecialLocations specialLocations) {
    this.specialLocations = specialLocations;
    return this;
  }

   /**
   * Get specialLocations
   * @return specialLocations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPECIAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SpecialLocations getSpecialLocations() {
    return specialLocations;
  }


  @JsonProperty(JSON_PROPERTY_SPECIAL_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpecialLocations(SpecialLocations specialLocations) {
    this.specialLocations = specialLocations;
  }


  public Run properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this run object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Run run = (Run) o;
    return Objects.equals(this.tool, run.tool) &&
        Objects.equals(this.invocations, run.invocations) &&
        Objects.equals(this.conversion, run.conversion) &&
        Objects.equals(this.language, run.language) &&
        Objects.equals(this.versionControlProvenance, run.versionControlProvenance) &&
        Objects.equals(this.originalUriBaseIds, run.originalUriBaseIds) &&
        Objects.equals(this.artifacts, run.artifacts) &&
        Objects.equals(this.logicalLocations, run.logicalLocations) &&
        Objects.equals(this.graphs, run.graphs) &&
        Objects.equals(this.results, run.results) &&
        Objects.equals(this.automationDetails, run.automationDetails) &&
        Objects.equals(this.runAggregates, run.runAggregates) &&
        Objects.equals(this.baselineGuid, run.baselineGuid) &&
        Objects.equals(this.redactionTokens, run.redactionTokens) &&
        Objects.equals(this.defaultEncoding, run.defaultEncoding) &&
        Objects.equals(this.defaultSourceLanguage, run.defaultSourceLanguage) &&
        Objects.equals(this.newlineSequences, run.newlineSequences) &&
        Objects.equals(this.columnKind, run.columnKind) &&
        Objects.equals(this.externalPropertyFileReferences, run.externalPropertyFileReferences) &&
        Objects.equals(this.threadFlowLocations, run.threadFlowLocations) &&
        Objects.equals(this.taxonomies, run.taxonomies) &&
        Objects.equals(this.addresses, run.addresses) &&
        Objects.equals(this.translations, run.translations) &&
        Objects.equals(this.policies, run.policies) &&
        Objects.equals(this.webRequests, run.webRequests) &&
        Objects.equals(this.webResponses, run.webResponses) &&
        Objects.equals(this.specialLocations, run.specialLocations) &&
        Objects.equals(this.properties, run.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tool, invocations, conversion, language, versionControlProvenance, originalUriBaseIds, artifacts, logicalLocations, graphs, results, automationDetails, runAggregates, baselineGuid, redactionTokens, defaultEncoding, defaultSourceLanguage, newlineSequences, columnKind, externalPropertyFileReferences, threadFlowLocations, taxonomies, addresses, translations, policies, webRequests, webResponses, specialLocations, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Run {\n");
    sb.append("    tool: ").append(toIndentedString(tool)).append("\n");
    sb.append("    invocations: ").append(toIndentedString(invocations)).append("\n");
    sb.append("    conversion: ").append(toIndentedString(conversion)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    versionControlProvenance: ").append(toIndentedString(versionControlProvenance)).append("\n");
    sb.append("    originalUriBaseIds: ").append(toIndentedString(originalUriBaseIds)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    logicalLocations: ").append(toIndentedString(logicalLocations)).append("\n");
    sb.append("    graphs: ").append(toIndentedString(graphs)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    automationDetails: ").append(toIndentedString(automationDetails)).append("\n");
    sb.append("    runAggregates: ").append(toIndentedString(runAggregates)).append("\n");
    sb.append("    baselineGuid: ").append(toIndentedString(baselineGuid)).append("\n");
    sb.append("    redactionTokens: ").append(toIndentedString(redactionTokens)).append("\n");
    sb.append("    defaultEncoding: ").append(toIndentedString(defaultEncoding)).append("\n");
    sb.append("    defaultSourceLanguage: ").append(toIndentedString(defaultSourceLanguage)).append("\n");
    sb.append("    newlineSequences: ").append(toIndentedString(newlineSequences)).append("\n");
    sb.append("    columnKind: ").append(toIndentedString(columnKind)).append("\n");
    sb.append("    externalPropertyFileReferences: ").append(toIndentedString(externalPropertyFileReferences)).append("\n");
    sb.append("    threadFlowLocations: ").append(toIndentedString(threadFlowLocations)).append("\n");
    sb.append("    taxonomies: ").append(toIndentedString(taxonomies)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    webRequests: ").append(toIndentedString(webRequests)).append("\n");
    sb.append("    webResponses: ").append(toIndentedString(webResponses)).append("\n");
    sb.append("    specialLocations: ").append(toIndentedString(specialLocations)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tool` to the URL query string
    if (getTool() != null) {
      joiner.add(getTool().toUrlQueryString(prefix + "tool" + suffix));
    }

    // add `invocations` to the URL query string
    if (getInvocations() != null) {
      for (int i = 0; i < getInvocations().size(); i++) {
        if (getInvocations().get(i) != null) {
          joiner.add(getInvocations().get(i).toUrlQueryString(String.format("%sinvocations%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `conversion` to the URL query string
    if (getConversion() != null) {
      joiner.add(getConversion().toUrlQueryString(prefix + "conversion" + suffix));
    }

    // add `language` to the URL query string
    if (getLanguage() != null) {
      joiner.add(String.format("%slanguage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLanguage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `versionControlProvenance` to the URL query string
    if (getVersionControlProvenance() != null) {
      int i = 0;
      for (VersionControlDetails _item : getVersionControlProvenance()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sversionControlProvenance%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `originalUriBaseIds` to the URL query string
    if (getOriginalUriBaseIds() != null) {
      for (String _key : getOriginalUriBaseIds().keySet()) {
        if (getOriginalUriBaseIds().get(_key) != null) {
          joiner.add(getOriginalUriBaseIds().get(_key).toUrlQueryString(String.format("%soriginalUriBaseIds%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `artifacts` to the URL query string
    if (getArtifacts() != null) {
      int i = 0;
      for (Artifact _item : getArtifacts()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sartifacts%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `logicalLocations` to the URL query string
    if (getLogicalLocations() != null) {
      int i = 0;
      for (LogicalLocation _item : getLogicalLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%slogicalLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `graphs` to the URL query string
    if (getGraphs() != null) {
      int i = 0;
      for (Graph _item : getGraphs()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sgraphs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `results` to the URL query string
    if (getResults() != null) {
      for (int i = 0; i < getResults().size(); i++) {
        if (getResults().get(i) != null) {
          joiner.add(getResults().get(i).toUrlQueryString(String.format("%sresults%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `automationDetails` to the URL query string
    if (getAutomationDetails() != null) {
      joiner.add(getAutomationDetails().toUrlQueryString(prefix + "automationDetails" + suffix));
    }

    // add `runAggregates` to the URL query string
    if (getRunAggregates() != null) {
      int i = 0;
      for (RunAutomationDetails _item : getRunAggregates()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%srunAggregates%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `baselineGuid` to the URL query string
    if (getBaselineGuid() != null) {
      joiner.add(String.format("%sbaselineGuid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaselineGuid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `redactionTokens` to the URL query string
    if (getRedactionTokens() != null) {
      int i = 0;
      for (String _item : getRedactionTokens()) {
        joiner.add(String.format("%sredactionTokens%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `defaultEncoding` to the URL query string
    if (getDefaultEncoding() != null) {
      joiner.add(String.format("%sdefaultEncoding%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultEncoding()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `defaultSourceLanguage` to the URL query string
    if (getDefaultSourceLanguage() != null) {
      joiner.add(String.format("%sdefaultSourceLanguage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultSourceLanguage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `newlineSequences` to the URL query string
    if (getNewlineSequences() != null) {
      int i = 0;
      for (String _item : getNewlineSequences()) {
        joiner.add(String.format("%snewlineSequences%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `columnKind` to the URL query string
    if (getColumnKind() != null) {
      joiner.add(String.format("%scolumnKind%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColumnKind()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `externalPropertyFileReferences` to the URL query string
    if (getExternalPropertyFileReferences() != null) {
      joiner.add(getExternalPropertyFileReferences().toUrlQueryString(prefix + "externalPropertyFileReferences" + suffix));
    }

    // add `threadFlowLocations` to the URL query string
    if (getThreadFlowLocations() != null) {
      int i = 0;
      for (ThreadFlowLocation _item : getThreadFlowLocations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sthreadFlowLocations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `taxonomies` to the URL query string
    if (getTaxonomies() != null) {
      int i = 0;
      for (ToolComponent _item : getTaxonomies()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%staxonomies%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `addresses` to the URL query string
    if (getAddresses() != null) {
      for (int i = 0; i < getAddresses().size(); i++) {
        if (getAddresses().get(i) != null) {
          joiner.add(getAddresses().get(i).toUrlQueryString(String.format("%saddresses%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `translations` to the URL query string
    if (getTranslations() != null) {
      int i = 0;
      for (ToolComponent _item : getTranslations()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%stranslations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `policies` to the URL query string
    if (getPolicies() != null) {
      int i = 0;
      for (ToolComponent _item : getPolicies()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%spolicies%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `webRequests` to the URL query string
    if (getWebRequests() != null) {
      int i = 0;
      for (WebRequest _item : getWebRequests()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%swebRequests%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `webResponses` to the URL query string
    if (getWebResponses() != null) {
      int i = 0;
      for (WebResponse _item : getWebResponses()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%swebResponses%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `specialLocations` to the URL query string
    if (getSpecialLocations() != null) {
      joiner.add(getSpecialLocations().toUrlQueryString(prefix + "specialLocations" + suffix));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

