/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hiddenlayer.sdk.rest.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SubmissionV2
 */
@JsonPropertyOrder({
  SubmissionV2.JSON_PROPERTY_METADATA,
  SubmissionV2.JSON_PROPERTY_TAGS,
  SubmissionV2.JSON_PROPERTY_SENSOR_ID,
  SubmissionV2.JSON_PROPERTY_REQUESTER_ID,
  SubmissionV2.JSON_PROPERTY_INPUT_LAYER,
  SubmissionV2.JSON_PROPERTY_INPUT_LAYER_DTYPE,
  SubmissionV2.JSON_PROPERTY_INPUT_LAYER_SHAPE,
  SubmissionV2.JSON_PROPERTY_OUTPUT_LAYER,
  SubmissionV2.JSON_PROPERTY_OUTPUT_LAYER_DTYPE,
  SubmissionV2.JSON_PROPERTY_OUTPUT_LAYER_SHAPE,
  SubmissionV2.JSON_PROPERTY_PREDICTIONS,
  SubmissionV2.JSON_PROPERTY_EVENT_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-19T23:42:19.631048Z[GMT]", comments = "Generator version: 7.6.0")
public class SubmissionV2 {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Object metadata;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private List<String> tags = new ArrayList<>();

  public static final String JSON_PROPERTY_SENSOR_ID = "sensor_id";
  private String sensorId;

  public static final String JSON_PROPERTY_REQUESTER_ID = "requester_id";
  private String requesterId = "UNKNOWN";

  public static final String JSON_PROPERTY_INPUT_LAYER = "input_layer";
  private String inputLayer;

  public static final String JSON_PROPERTY_INPUT_LAYER_DTYPE = "input_layer_dtype";
  private String inputLayerDtype;

  public static final String JSON_PROPERTY_INPUT_LAYER_SHAPE = "input_layer_shape";
  private List<BigDecimal> inputLayerShape = new ArrayList<>();

  public static final String JSON_PROPERTY_OUTPUT_LAYER = "output_layer";
  private String outputLayer;

  public static final String JSON_PROPERTY_OUTPUT_LAYER_DTYPE = "output_layer_dtype";
  private String outputLayerDtype;

  public static final String JSON_PROPERTY_OUTPUT_LAYER_SHAPE = "output_layer_shape";
  private List<BigDecimal> outputLayerShape = new ArrayList<>();

  public static final String JSON_PROPERTY_PREDICTIONS = "predictions";
  private List<BigDecimal> predictions = new ArrayList<>();

  public static final String JSON_PROPERTY_EVENT_TIME = "event_time";
  private String eventTime;

  public SubmissionV2() { 
  }

  public SubmissionV2 metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public SubmissionV2 tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SubmissionV2 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public SubmissionV2 sensorId(String sensorId) {
    this.sensorId = sensorId;
    return this;
  }

   /**
   * Get sensorId
   * @return sensorId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENSOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSensorId() {
    return sensorId;
  }


  @JsonProperty(JSON_PROPERTY_SENSOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSensorId(String sensorId) {
    this.sensorId = sensorId;
  }


  public SubmissionV2 requesterId(String requesterId) {
    this.requesterId = requesterId;
    return this;
  }

   /**
   * Get requesterId
   * @return requesterId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUESTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRequesterId() {
    return requesterId;
  }


  @JsonProperty(JSON_PROPERTY_REQUESTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequesterId(String requesterId) {
    this.requesterId = requesterId;
  }


  public SubmissionV2 inputLayer(String inputLayer) {
    this.inputLayer = inputLayer;
    return this;
  }

   /**
   * Get inputLayer
   * @return inputLayer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_LAYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInputLayer() {
    return inputLayer;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_LAYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputLayer(String inputLayer) {
    this.inputLayer = inputLayer;
  }


  public SubmissionV2 inputLayerDtype(String inputLayerDtype) {
    this.inputLayerDtype = inputLayerDtype;
    return this;
  }

   /**
   * Get inputLayerDtype
   * @return inputLayerDtype
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_LAYER_DTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInputLayerDtype() {
    return inputLayerDtype;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_LAYER_DTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputLayerDtype(String inputLayerDtype) {
    this.inputLayerDtype = inputLayerDtype;
  }


  public SubmissionV2 inputLayerShape(List<BigDecimal> inputLayerShape) {
    this.inputLayerShape = inputLayerShape;
    return this;
  }

  public SubmissionV2 addInputLayerShapeItem(BigDecimal inputLayerShapeItem) {
    if (this.inputLayerShape == null) {
      this.inputLayerShape = new ArrayList<>();
    }
    this.inputLayerShape.add(inputLayerShapeItem);
    return this;
  }

   /**
   * Get inputLayerShape
   * @return inputLayerShape
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_LAYER_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<BigDecimal> getInputLayerShape() {
    return inputLayerShape;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_LAYER_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputLayerShape(List<BigDecimal> inputLayerShape) {
    this.inputLayerShape = inputLayerShape;
  }


  public SubmissionV2 outputLayer(String outputLayer) {
    this.outputLayer = outputLayer;
    return this;
  }

   /**
   * Get outputLayer
   * @return outputLayer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOutputLayer() {
    return outputLayer;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputLayer(String outputLayer) {
    this.outputLayer = outputLayer;
  }


  public SubmissionV2 outputLayerDtype(String outputLayerDtype) {
    this.outputLayerDtype = outputLayerDtype;
    return this;
  }

   /**
   * Get outputLayerDtype
   * @return outputLayerDtype
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER_DTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOutputLayerDtype() {
    return outputLayerDtype;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER_DTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputLayerDtype(String outputLayerDtype) {
    this.outputLayerDtype = outputLayerDtype;
  }


  public SubmissionV2 outputLayerShape(List<BigDecimal> outputLayerShape) {
    this.outputLayerShape = outputLayerShape;
    return this;
  }

  public SubmissionV2 addOutputLayerShapeItem(BigDecimal outputLayerShapeItem) {
    if (this.outputLayerShape == null) {
      this.outputLayerShape = new ArrayList<>();
    }
    this.outputLayerShape.add(outputLayerShapeItem);
    return this;
  }

   /**
   * Get outputLayerShape
   * @return outputLayerShape
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<BigDecimal> getOutputLayerShape() {
    return outputLayerShape;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_LAYER_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputLayerShape(List<BigDecimal> outputLayerShape) {
    this.outputLayerShape = outputLayerShape;
  }


  public SubmissionV2 predictions(List<BigDecimal> predictions) {
    this.predictions = predictions;
    return this;
  }

  public SubmissionV2 addPredictionsItem(BigDecimal predictionsItem) {
    if (this.predictions == null) {
      this.predictions = new ArrayList<>();
    }
    this.predictions.add(predictionsItem);
    return this;
  }

   /**
   * Get predictions
   * @return predictions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREDICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BigDecimal> getPredictions() {
    return predictions;
  }


  @JsonProperty(JSON_PROPERTY_PREDICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredictions(List<BigDecimal> predictions) {
    this.predictions = predictions;
  }


  public SubmissionV2 eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

   /**
   * Get eventTime
   * @return eventTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventTime() {
    return eventTime;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  /**
   * Return true if this SubmissionV2 object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionV2 submissionV2 = (SubmissionV2) o;
    return Objects.equals(this.metadata, submissionV2.metadata) &&
        Objects.equals(this.tags, submissionV2.tags) &&
        Objects.equals(this.sensorId, submissionV2.sensorId) &&
        Objects.equals(this.requesterId, submissionV2.requesterId) &&
        Objects.equals(this.inputLayer, submissionV2.inputLayer) &&
        Objects.equals(this.inputLayerDtype, submissionV2.inputLayerDtype) &&
        Objects.equals(this.inputLayerShape, submissionV2.inputLayerShape) &&
        Objects.equals(this.outputLayer, submissionV2.outputLayer) &&
        Objects.equals(this.outputLayerDtype, submissionV2.outputLayerDtype) &&
        Objects.equals(this.outputLayerShape, submissionV2.outputLayerShape) &&
        Objects.equals(this.predictions, submissionV2.predictions) &&
        Objects.equals(this.eventTime, submissionV2.eventTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, tags, sensorId, requesterId, inputLayer, inputLayerDtype, inputLayerShape, outputLayer, outputLayerDtype, outputLayerShape, predictions, eventTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionV2 {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sensorId: ").append(toIndentedString(sensorId)).append("\n");
    sb.append("    requesterId: ").append(toIndentedString(requesterId)).append("\n");
    sb.append("    inputLayer: ").append(toIndentedString(inputLayer)).append("\n");
    sb.append("    inputLayerDtype: ").append(toIndentedString(inputLayerDtype)).append("\n");
    sb.append("    inputLayerShape: ").append(toIndentedString(inputLayerShape)).append("\n");
    sb.append("    outputLayer: ").append(toIndentedString(outputLayer)).append("\n");
    sb.append("    outputLayerDtype: ").append(toIndentedString(outputLayerDtype)).append("\n");
    sb.append("    outputLayerShape: ").append(toIndentedString(outputLayerShape)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      for (int i = 0; i < getTags().size(); i++) {
        joiner.add(String.format("%stags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getTags().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `sensor_id` to the URL query string
    if (getSensorId() != null) {
      joiner.add(String.format("%ssensor_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSensorId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `requester_id` to the URL query string
    if (getRequesterId() != null) {
      joiner.add(String.format("%srequester_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequesterId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `input_layer` to the URL query string
    if (getInputLayer() != null) {
      joiner.add(String.format("%sinput_layer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputLayer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `input_layer_dtype` to the URL query string
    if (getInputLayerDtype() != null) {
      joiner.add(String.format("%sinput_layer_dtype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInputLayerDtype()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `input_layer_shape` to the URL query string
    if (getInputLayerShape() != null) {
      for (int i = 0; i < getInputLayerShape().size(); i++) {
        if (getInputLayerShape().get(i) != null) {
          joiner.add(String.format("%sinput_layer_shape%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getInputLayerShape().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `output_layer` to the URL query string
    if (getOutputLayer() != null) {
      joiner.add(String.format("%soutput_layer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputLayer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `output_layer_dtype` to the URL query string
    if (getOutputLayerDtype() != null) {
      joiner.add(String.format("%soutput_layer_dtype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputLayerDtype()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `output_layer_shape` to the URL query string
    if (getOutputLayerShape() != null) {
      for (int i = 0; i < getOutputLayerShape().size(); i++) {
        if (getOutputLayerShape().get(i) != null) {
          joiner.add(String.format("%soutput_layer_shape%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getOutputLayerShape().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `predictions` to the URL query string
    if (getPredictions() != null) {
      for (int i = 0; i < getPredictions().size(); i++) {
        if (getPredictions().get(i) != null) {
          joiner.add(String.format("%spredictions%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getPredictions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `event_time` to the URL query string
    if (getEventTime() != null) {
      joiner.add(String.format("%sevent_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

