/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ArtifactLocation;
import org.openapitools.client.model.ConfigurationOverride;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.PropertyBag;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The runtime environment of the analysis tool run.
 */
@JsonPropertyOrder({
  Invocation.JSON_PROPERTY_COMMAND_LINE,
  Invocation.JSON_PROPERTY_ARGUMENTS,
  Invocation.JSON_PROPERTY_RESPONSE_FILES,
  Invocation.JSON_PROPERTY_START_TIME_UTC,
  Invocation.JSON_PROPERTY_END_TIME_UTC,
  Invocation.JSON_PROPERTY_EXIT_CODE,
  Invocation.JSON_PROPERTY_RULE_CONFIGURATION_OVERRIDES,
  Invocation.JSON_PROPERTY_NOTIFICATION_CONFIGURATION_OVERRIDES,
  Invocation.JSON_PROPERTY_TOOL_EXECUTION_NOTIFICATIONS,
  Invocation.JSON_PROPERTY_TOOL_CONFIGURATION_NOTIFICATIONS,
  Invocation.JSON_PROPERTY_EXIT_CODE_DESCRIPTION,
  Invocation.JSON_PROPERTY_EXIT_SIGNAL_NAME,
  Invocation.JSON_PROPERTY_EXIT_SIGNAL_NUMBER,
  Invocation.JSON_PROPERTY_PROCESS_START_FAILURE_MESSAGE,
  Invocation.JSON_PROPERTY_EXECUTION_SUCCESSFUL,
  Invocation.JSON_PROPERTY_MACHINE,
  Invocation.JSON_PROPERTY_ACCOUNT,
  Invocation.JSON_PROPERTY_PROCESS_ID,
  Invocation.JSON_PROPERTY_EXECUTABLE_LOCATION,
  Invocation.JSON_PROPERTY_WORKING_DIRECTORY,
  Invocation.JSON_PROPERTY_ENVIRONMENT_VARIABLES,
  Invocation.JSON_PROPERTY_STDIN,
  Invocation.JSON_PROPERTY_STDOUT,
  Invocation.JSON_PROPERTY_STDERR,
  Invocation.JSON_PROPERTY_STDOUT_STDERR,
  Invocation.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T21:07:55.255008Z[GMT]", comments = "Generator version: 7.6.0")
public class Invocation {
  public static final String JSON_PROPERTY_COMMAND_LINE = "commandLine";
  private String commandLine;

  public static final String JSON_PROPERTY_ARGUMENTS = "arguments";
  private List<String> arguments = new ArrayList<>();

  public static final String JSON_PROPERTY_RESPONSE_FILES = "responseFiles";
  private Set<ArtifactLocation> responseFiles = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_START_TIME_UTC = "startTimeUtc";
  private OffsetDateTime startTimeUtc;

  public static final String JSON_PROPERTY_END_TIME_UTC = "endTimeUtc";
  private OffsetDateTime endTimeUtc;

  public static final String JSON_PROPERTY_EXIT_CODE = "exitCode";
  private Integer exitCode;

  public static final String JSON_PROPERTY_RULE_CONFIGURATION_OVERRIDES = "ruleConfigurationOverrides";
  private Set<ConfigurationOverride> ruleConfigurationOverrides = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_NOTIFICATION_CONFIGURATION_OVERRIDES = "notificationConfigurationOverrides";
  private Set<ConfigurationOverride> notificationConfigurationOverrides = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_TOOL_EXECUTION_NOTIFICATIONS = "toolExecutionNotifications";
  private List<Notification> toolExecutionNotifications = new ArrayList<>();

  public static final String JSON_PROPERTY_TOOL_CONFIGURATION_NOTIFICATIONS = "toolConfigurationNotifications";
  private List<Notification> toolConfigurationNotifications = new ArrayList<>();

  public static final String JSON_PROPERTY_EXIT_CODE_DESCRIPTION = "exitCodeDescription";
  private String exitCodeDescription;

  public static final String JSON_PROPERTY_EXIT_SIGNAL_NAME = "exitSignalName";
  private String exitSignalName;

  public static final String JSON_PROPERTY_EXIT_SIGNAL_NUMBER = "exitSignalNumber";
  private Integer exitSignalNumber;

  public static final String JSON_PROPERTY_PROCESS_START_FAILURE_MESSAGE = "processStartFailureMessage";
  private String processStartFailureMessage;

  public static final String JSON_PROPERTY_EXECUTION_SUCCESSFUL = "executionSuccessful";
  private Boolean executionSuccessful;

  public static final String JSON_PROPERTY_MACHINE = "machine";
  private String machine;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private String account;

  public static final String JSON_PROPERTY_PROCESS_ID = "processId";
  private Integer processId;

  public static final String JSON_PROPERTY_EXECUTABLE_LOCATION = "executableLocation";
  private ArtifactLocation executableLocation;

  public static final String JSON_PROPERTY_WORKING_DIRECTORY = "workingDirectory";
  private ArtifactLocation workingDirectory;

  public static final String JSON_PROPERTY_ENVIRONMENT_VARIABLES = "environmentVariables";
  private Map<String, String> environmentVariables = new HashMap<>();

  public static final String JSON_PROPERTY_STDIN = "stdin";
  private ArtifactLocation stdin;

  public static final String JSON_PROPERTY_STDOUT = "stdout";
  private ArtifactLocation stdout;

  public static final String JSON_PROPERTY_STDERR = "stderr";
  private ArtifactLocation stderr;

  public static final String JSON_PROPERTY_STDOUT_STDERR = "stdoutStderr";
  private ArtifactLocation stdoutStderr;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public Invocation() { 
  }

  public Invocation commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

   /**
   * The command line used to invoke the tool.
   * @return commandLine
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMAND_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommandLine() {
    return commandLine;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public Invocation arguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public Invocation addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

   /**
   * An array of strings, containing in order the command line arguments passed to the tool from the operating system.
   * @return arguments
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getArguments() {
    return arguments;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  public Invocation responseFiles(Set<ArtifactLocation> responseFiles) {
    this.responseFiles = responseFiles;
    return this;
  }

  public Invocation addResponseFilesItem(ArtifactLocation responseFilesItem) {
    if (this.responseFiles == null) {
      this.responseFiles = new LinkedHashSet<>();
    }
    this.responseFiles.add(responseFilesItem);
    return this;
  }

   /**
   * The locations of any response files specified on the tool&#39;s command line.
   * @return responseFiles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ArtifactLocation> getResponseFiles() {
    return responseFiles;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RESPONSE_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseFiles(Set<ArtifactLocation> responseFiles) {
    this.responseFiles = responseFiles;
  }


  public Invocation startTimeUtc(OffsetDateTime startTimeUtc) {
    this.startTimeUtc = startTimeUtc;
    return this;
  }

   /**
   * The Coordinated Universal Time (UTC) date and time at which the invocation started. See \&quot;Date/time properties\&quot; in the SARIF spec for the required format.
   * @return startTimeUtc
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartTimeUtc() {
    return startTimeUtc;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTimeUtc(OffsetDateTime startTimeUtc) {
    this.startTimeUtc = startTimeUtc;
  }


  public Invocation endTimeUtc(OffsetDateTime endTimeUtc) {
    this.endTimeUtc = endTimeUtc;
    return this;
  }

   /**
   * The Coordinated Universal Time (UTC) date and time at which the invocation ended. See \&quot;Date/time properties\&quot; in the SARIF spec for the required format.
   * @return endTimeUtc
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndTimeUtc() {
    return endTimeUtc;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTimeUtc(OffsetDateTime endTimeUtc) {
    this.endTimeUtc = endTimeUtc;
  }


  public Invocation exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

   /**
   * The process exit code.
   * @return exitCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXIT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExitCode() {
    return exitCode;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public Invocation ruleConfigurationOverrides(Set<ConfigurationOverride> ruleConfigurationOverrides) {
    this.ruleConfigurationOverrides = ruleConfigurationOverrides;
    return this;
  }

  public Invocation addRuleConfigurationOverridesItem(ConfigurationOverride ruleConfigurationOverridesItem) {
    if (this.ruleConfigurationOverrides == null) {
      this.ruleConfigurationOverrides = new LinkedHashSet<>();
    }
    this.ruleConfigurationOverrides.add(ruleConfigurationOverridesItem);
    return this;
  }

   /**
   * An array of configurationOverride objects that describe rules related runtime overrides.
   * @return ruleConfigurationOverrides
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULE_CONFIGURATION_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ConfigurationOverride> getRuleConfigurationOverrides() {
    return ruleConfigurationOverrides;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RULE_CONFIGURATION_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuleConfigurationOverrides(Set<ConfigurationOverride> ruleConfigurationOverrides) {
    this.ruleConfigurationOverrides = ruleConfigurationOverrides;
  }


  public Invocation notificationConfigurationOverrides(Set<ConfigurationOverride> notificationConfigurationOverrides) {
    this.notificationConfigurationOverrides = notificationConfigurationOverrides;
    return this;
  }

  public Invocation addNotificationConfigurationOverridesItem(ConfigurationOverride notificationConfigurationOverridesItem) {
    if (this.notificationConfigurationOverrides == null) {
      this.notificationConfigurationOverrides = new LinkedHashSet<>();
    }
    this.notificationConfigurationOverrides.add(notificationConfigurationOverridesItem);
    return this;
  }

   /**
   * An array of configurationOverride objects that describe notifications related runtime overrides.
   * @return notificationConfigurationOverrides
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_CONFIGURATION_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ConfigurationOverride> getNotificationConfigurationOverrides() {
    return notificationConfigurationOverrides;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_CONFIGURATION_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationConfigurationOverrides(Set<ConfigurationOverride> notificationConfigurationOverrides) {
    this.notificationConfigurationOverrides = notificationConfigurationOverrides;
  }


  public Invocation toolExecutionNotifications(List<Notification> toolExecutionNotifications) {
    this.toolExecutionNotifications = toolExecutionNotifications;
    return this;
  }

  public Invocation addToolExecutionNotificationsItem(Notification toolExecutionNotificationsItem) {
    if (this.toolExecutionNotifications == null) {
      this.toolExecutionNotifications = new ArrayList<>();
    }
    this.toolExecutionNotifications.add(toolExecutionNotificationsItem);
    return this;
  }

   /**
   * A list of runtime conditions detected by the tool during the analysis.
   * @return toolExecutionNotifications
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_EXECUTION_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Notification> getToolExecutionNotifications() {
    return toolExecutionNotifications;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_EXECUTION_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolExecutionNotifications(List<Notification> toolExecutionNotifications) {
    this.toolExecutionNotifications = toolExecutionNotifications;
  }


  public Invocation toolConfigurationNotifications(List<Notification> toolConfigurationNotifications) {
    this.toolConfigurationNotifications = toolConfigurationNotifications;
    return this;
  }

  public Invocation addToolConfigurationNotificationsItem(Notification toolConfigurationNotificationsItem) {
    if (this.toolConfigurationNotifications == null) {
      this.toolConfigurationNotifications = new ArrayList<>();
    }
    this.toolConfigurationNotifications.add(toolConfigurationNotificationsItem);
    return this;
  }

   /**
   * A list of conditions detected by the tool that are relevant to the tool&#39;s configuration.
   * @return toolConfigurationNotifications
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CONFIGURATION_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Notification> getToolConfigurationNotifications() {
    return toolConfigurationNotifications;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CONFIGURATION_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolConfigurationNotifications(List<Notification> toolConfigurationNotifications) {
    this.toolConfigurationNotifications = toolConfigurationNotifications;
  }


  public Invocation exitCodeDescription(String exitCodeDescription) {
    this.exitCodeDescription = exitCodeDescription;
    return this;
  }

   /**
   * The reason for the process exit.
   * @return exitCodeDescription
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXIT_CODE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExitCodeDescription() {
    return exitCodeDescription;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_CODE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitCodeDescription(String exitCodeDescription) {
    this.exitCodeDescription = exitCodeDescription;
  }


  public Invocation exitSignalName(String exitSignalName) {
    this.exitSignalName = exitSignalName;
    return this;
  }

   /**
   * The name of the signal that caused the process to exit.
   * @return exitSignalName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXIT_SIGNAL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExitSignalName() {
    return exitSignalName;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_SIGNAL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitSignalName(String exitSignalName) {
    this.exitSignalName = exitSignalName;
  }


  public Invocation exitSignalNumber(Integer exitSignalNumber) {
    this.exitSignalNumber = exitSignalNumber;
    return this;
  }

   /**
   * The numeric value of the signal that caused the process to exit.
   * @return exitSignalNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXIT_SIGNAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExitSignalNumber() {
    return exitSignalNumber;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_SIGNAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitSignalNumber(Integer exitSignalNumber) {
    this.exitSignalNumber = exitSignalNumber;
  }


  public Invocation processStartFailureMessage(String processStartFailureMessage) {
    this.processStartFailureMessage = processStartFailureMessage;
    return this;
  }

   /**
   * The reason given by the operating system that the process failed to start.
   * @return processStartFailureMessage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_START_FAILURE_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessStartFailureMessage() {
    return processStartFailureMessage;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_START_FAILURE_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessStartFailureMessage(String processStartFailureMessage) {
    this.processStartFailureMessage = processStartFailureMessage;
  }


  public Invocation executionSuccessful(Boolean executionSuccessful) {
    this.executionSuccessful = executionSuccessful;
    return this;
  }

   /**
   * Specifies whether the tool&#39;s execution completed successfully.
   * @return executionSuccessful
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXECUTION_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getExecutionSuccessful() {
    return executionSuccessful;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutionSuccessful(Boolean executionSuccessful) {
    this.executionSuccessful = executionSuccessful;
  }


  public Invocation machine(String machine) {
    this.machine = machine;
    return this;
  }

   /**
   * The machine on which the invocation occurred.
   * @return machine
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MACHINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMachine() {
    return machine;
  }


  @JsonProperty(JSON_PROPERTY_MACHINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMachine(String machine) {
    this.machine = machine;
  }


  public Invocation account(String account) {
    this.account = account;
    return this;
  }

   /**
   * The account under which the invocation occurred.
   * @return account
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(String account) {
    this.account = account;
  }


  public Invocation processId(Integer processId) {
    this.processId = processId;
    return this;
  }

   /**
   * The id of the process in which the invocation occurred.
   * @return processId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getProcessId() {
    return processId;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessId(Integer processId) {
    this.processId = processId;
  }


  public Invocation executableLocation(ArtifactLocation executableLocation) {
    this.executableLocation = executableLocation;
    return this;
  }

   /**
   * Get executableLocation
   * @return executableLocation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTABLE_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getExecutableLocation() {
    return executableLocation;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTABLE_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutableLocation(ArtifactLocation executableLocation) {
    this.executableLocation = executableLocation;
  }


  public Invocation workingDirectory(ArtifactLocation workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

   /**
   * Get workingDirectory
   * @return workingDirectory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKING_DIRECTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getWorkingDirectory() {
    return workingDirectory;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIRECTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDirectory(ArtifactLocation workingDirectory) {
    this.workingDirectory = workingDirectory;
  }


  public Invocation environmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public Invocation putEnvironmentVariablesItem(String key, String environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new HashMap<>();
    }
    this.environmentVariables.put(key, environmentVariablesItem);
    return this;
  }

   /**
   * The environment variables associated with the analysis tool process, expressed as key/value pairs.
   * @return environmentVariables
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getEnvironmentVariables() {
    return environmentVariables;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public Invocation stdin(ArtifactLocation stdin) {
    this.stdin = stdin;
    return this;
  }

   /**
   * Get stdin
   * @return stdin
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getStdin() {
    return stdin;
  }


  @JsonProperty(JSON_PROPERTY_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdin(ArtifactLocation stdin) {
    this.stdin = stdin;
  }


  public Invocation stdout(ArtifactLocation stdout) {
    this.stdout = stdout;
    return this;
  }

   /**
   * Get stdout
   * @return stdout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getStdout() {
    return stdout;
  }


  @JsonProperty(JSON_PROPERTY_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdout(ArtifactLocation stdout) {
    this.stdout = stdout;
  }


  public Invocation stderr(ArtifactLocation stderr) {
    this.stderr = stderr;
    return this;
  }

   /**
   * Get stderr
   * @return stderr
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getStderr() {
    return stderr;
  }


  @JsonProperty(JSON_PROPERTY_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStderr(ArtifactLocation stderr) {
    this.stderr = stderr;
  }


  public Invocation stdoutStderr(ArtifactLocation stdoutStderr) {
    this.stdoutStderr = stdoutStderr;
    return this;
  }

   /**
   * Get stdoutStderr
   * @return stdoutStderr
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDOUT_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArtifactLocation getStdoutStderr() {
    return stdoutStderr;
  }


  @JsonProperty(JSON_PROPERTY_STDOUT_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdoutStderr(ArtifactLocation stdoutStderr) {
    this.stdoutStderr = stdoutStderr;
  }


  public Invocation properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this invocation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invocation invocation = (Invocation) o;
    return Objects.equals(this.commandLine, invocation.commandLine) &&
        Objects.equals(this.arguments, invocation.arguments) &&
        Objects.equals(this.responseFiles, invocation.responseFiles) &&
        Objects.equals(this.startTimeUtc, invocation.startTimeUtc) &&
        Objects.equals(this.endTimeUtc, invocation.endTimeUtc) &&
        Objects.equals(this.exitCode, invocation.exitCode) &&
        Objects.equals(this.ruleConfigurationOverrides, invocation.ruleConfigurationOverrides) &&
        Objects.equals(this.notificationConfigurationOverrides, invocation.notificationConfigurationOverrides) &&
        Objects.equals(this.toolExecutionNotifications, invocation.toolExecutionNotifications) &&
        Objects.equals(this.toolConfigurationNotifications, invocation.toolConfigurationNotifications) &&
        Objects.equals(this.exitCodeDescription, invocation.exitCodeDescription) &&
        Objects.equals(this.exitSignalName, invocation.exitSignalName) &&
        Objects.equals(this.exitSignalNumber, invocation.exitSignalNumber) &&
        Objects.equals(this.processStartFailureMessage, invocation.processStartFailureMessage) &&
        Objects.equals(this.executionSuccessful, invocation.executionSuccessful) &&
        Objects.equals(this.machine, invocation.machine) &&
        Objects.equals(this.account, invocation.account) &&
        Objects.equals(this.processId, invocation.processId) &&
        Objects.equals(this.executableLocation, invocation.executableLocation) &&
        Objects.equals(this.workingDirectory, invocation.workingDirectory) &&
        Objects.equals(this.environmentVariables, invocation.environmentVariables) &&
        Objects.equals(this.stdin, invocation.stdin) &&
        Objects.equals(this.stdout, invocation.stdout) &&
        Objects.equals(this.stderr, invocation.stderr) &&
        Objects.equals(this.stdoutStderr, invocation.stdoutStderr) &&
        Objects.equals(this.properties, invocation.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, arguments, responseFiles, startTimeUtc, endTimeUtc, exitCode, ruleConfigurationOverrides, notificationConfigurationOverrides, toolExecutionNotifications, toolConfigurationNotifications, exitCodeDescription, exitSignalName, exitSignalNumber, processStartFailureMessage, executionSuccessful, machine, account, processId, executableLocation, workingDirectory, environmentVariables, stdin, stdout, stderr, stdoutStderr, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invocation {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    responseFiles: ").append(toIndentedString(responseFiles)).append("\n");
    sb.append("    startTimeUtc: ").append(toIndentedString(startTimeUtc)).append("\n");
    sb.append("    endTimeUtc: ").append(toIndentedString(endTimeUtc)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    ruleConfigurationOverrides: ").append(toIndentedString(ruleConfigurationOverrides)).append("\n");
    sb.append("    notificationConfigurationOverrides: ").append(toIndentedString(notificationConfigurationOverrides)).append("\n");
    sb.append("    toolExecutionNotifications: ").append(toIndentedString(toolExecutionNotifications)).append("\n");
    sb.append("    toolConfigurationNotifications: ").append(toIndentedString(toolConfigurationNotifications)).append("\n");
    sb.append("    exitCodeDescription: ").append(toIndentedString(exitCodeDescription)).append("\n");
    sb.append("    exitSignalName: ").append(toIndentedString(exitSignalName)).append("\n");
    sb.append("    exitSignalNumber: ").append(toIndentedString(exitSignalNumber)).append("\n");
    sb.append("    processStartFailureMessage: ").append(toIndentedString(processStartFailureMessage)).append("\n");
    sb.append("    executionSuccessful: ").append(toIndentedString(executionSuccessful)).append("\n");
    sb.append("    machine: ").append(toIndentedString(machine)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    executableLocation: ").append(toIndentedString(executableLocation)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    stdin: ").append(toIndentedString(stdin)).append("\n");
    sb.append("    stdout: ").append(toIndentedString(stdout)).append("\n");
    sb.append("    stderr: ").append(toIndentedString(stderr)).append("\n");
    sb.append("    stdoutStderr: ").append(toIndentedString(stdoutStderr)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `commandLine` to the URL query string
    if (getCommandLine() != null) {
      joiner.add(String.format("%scommandLine%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommandLine()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `arguments` to the URL query string
    if (getArguments() != null) {
      for (int i = 0; i < getArguments().size(); i++) {
        joiner.add(String.format("%sarguments%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getArguments().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `responseFiles` to the URL query string
    if (getResponseFiles() != null) {
      int i = 0;
      for (ArtifactLocation _item : getResponseFiles()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sresponseFiles%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `startTimeUtc` to the URL query string
    if (getStartTimeUtc() != null) {
      joiner.add(String.format("%sstartTimeUtc%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartTimeUtc()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endTimeUtc` to the URL query string
    if (getEndTimeUtc() != null) {
      joiner.add(String.format("%sendTimeUtc%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndTimeUtc()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exitCode` to the URL query string
    if (getExitCode() != null) {
      joiner.add(String.format("%sexitCode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExitCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ruleConfigurationOverrides` to the URL query string
    if (getRuleConfigurationOverrides() != null) {
      int i = 0;
      for (ConfigurationOverride _item : getRuleConfigurationOverrides()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%sruleConfigurationOverrides%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `notificationConfigurationOverrides` to the URL query string
    if (getNotificationConfigurationOverrides() != null) {
      int i = 0;
      for (ConfigurationOverride _item : getNotificationConfigurationOverrides()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%snotificationConfigurationOverrides%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    // add `toolExecutionNotifications` to the URL query string
    if (getToolExecutionNotifications() != null) {
      for (int i = 0; i < getToolExecutionNotifications().size(); i++) {
        if (getToolExecutionNotifications().get(i) != null) {
          joiner.add(getToolExecutionNotifications().get(i).toUrlQueryString(String.format("%stoolExecutionNotifications%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `toolConfigurationNotifications` to the URL query string
    if (getToolConfigurationNotifications() != null) {
      for (int i = 0; i < getToolConfigurationNotifications().size(); i++) {
        if (getToolConfigurationNotifications().get(i) != null) {
          joiner.add(getToolConfigurationNotifications().get(i).toUrlQueryString(String.format("%stoolConfigurationNotifications%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `exitCodeDescription` to the URL query string
    if (getExitCodeDescription() != null) {
      joiner.add(String.format("%sexitCodeDescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExitCodeDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exitSignalName` to the URL query string
    if (getExitSignalName() != null) {
      joiner.add(String.format("%sexitSignalName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExitSignalName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exitSignalNumber` to the URL query string
    if (getExitSignalNumber() != null) {
      joiner.add(String.format("%sexitSignalNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExitSignalNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `processStartFailureMessage` to the URL query string
    if (getProcessStartFailureMessage() != null) {
      joiner.add(String.format("%sprocessStartFailureMessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessStartFailureMessage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `executionSuccessful` to the URL query string
    if (getExecutionSuccessful() != null) {
      joiner.add(String.format("%sexecutionSuccessful%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExecutionSuccessful()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `machine` to the URL query string
    if (getMachine() != null) {
      joiner.add(String.format("%smachine%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMachine()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `account` to the URL query string
    if (getAccount() != null) {
      joiner.add(String.format("%saccount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAccount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `processId` to the URL query string
    if (getProcessId() != null) {
      joiner.add(String.format("%sprocessId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `executableLocation` to the URL query string
    if (getExecutableLocation() != null) {
      joiner.add(getExecutableLocation().toUrlQueryString(prefix + "executableLocation" + suffix));
    }

    // add `workingDirectory` to the URL query string
    if (getWorkingDirectory() != null) {
      joiner.add(getWorkingDirectory().toUrlQueryString(prefix + "workingDirectory" + suffix));
    }

    // add `environmentVariables` to the URL query string
    if (getEnvironmentVariables() != null) {
      for (String _key : getEnvironmentVariables().keySet()) {
        joiner.add(String.format("%senvironmentVariables%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getEnvironmentVariables().get(_key), URLEncoder.encode(String.valueOf(getEnvironmentVariables().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `stdin` to the URL query string
    if (getStdin() != null) {
      joiner.add(getStdin().toUrlQueryString(prefix + "stdin" + suffix));
    }

    // add `stdout` to the URL query string
    if (getStdout() != null) {
      joiner.add(getStdout().toUrlQueryString(prefix + "stdout" + suffix));
    }

    // add `stderr` to the URL query string
    if (getStderr() != null) {
      joiner.add(getStderr().toUrlQueryString(prefix + "stderr" + suffix));
    }

    // add `stdoutStderr` to the URL query string
    if (getStdoutStderr() != null) {
      joiner.add(getStdoutStderr().toUrlQueryString(prefix + "stdoutStderr" + suffix));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

