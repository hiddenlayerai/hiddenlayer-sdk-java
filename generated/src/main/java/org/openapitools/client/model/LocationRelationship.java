/*
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.PropertyBag;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Information about the relation of one location to another.
 */
@JsonPropertyOrder({
  LocationRelationship.JSON_PROPERTY_TARGET,
  LocationRelationship.JSON_PROPERTY_KINDS,
  LocationRelationship.JSON_PROPERTY_DESCRIPTION,
  LocationRelationship.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-13T21:07:55.255008Z[GMT]", comments = "Generator version: 7.6.0")
public class LocationRelationship {
  public static final String JSON_PROPERTY_TARGET = "target";
  private Integer target;

  public static final String JSON_PROPERTY_KINDS = "kinds";
  private Set<String> kinds = new LinkedHashSet<>(Arrays.asList("relevant"));

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<Message> description = JsonNullable.<Message>undefined();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private PropertyBag properties;

  public LocationRelationship() { 
  }

  public LocationRelationship target(Integer target) {
    this.target = target;
    return this;
  }

   /**
   * A reference to the related location.
   * minimum: 0
   * @return target
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTarget(Integer target) {
    this.target = target;
  }


  public LocationRelationship kinds(Set<String> kinds) {
    this.kinds = kinds;
    return this;
  }

  public LocationRelationship addKindsItem(String kindsItem) {
    if (this.kinds == null) {
      this.kinds = new LinkedHashSet<>(Arrays.asList("relevant"));
    }
    this.kinds.add(kindsItem);
    return this;
  }

   /**
   * A set of distinct strings that categorize the relationship. Well-known kinds include &#39;includes&#39;, &#39;isIncludedBy&#39; and &#39;relevant&#39;.
   * @return kinds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KINDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getKinds() {
    return kinds;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_KINDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKinds(Set<String> kinds) {
    this.kinds = kinds;
  }


  public LocationRelationship description(Message description) {
    this.description = JsonNullable.<Message>of(description);
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Message getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Message> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<Message> description) {
    this.description = description;
  }

  public void setDescription(Message description) {
    this.description = JsonNullable.<Message>of(description);
  }


  public LocationRelationship properties(PropertyBag properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyBag getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(PropertyBag properties) {
    this.properties = properties;
  }


  /**
   * Return true if this locationRelationship object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationRelationship locationRelationship = (LocationRelationship) o;
    return Objects.equals(this.target, locationRelationship.target) &&
        Objects.equals(this.kinds, locationRelationship.kinds) &&
        equalsNullable(this.description, locationRelationship.description) &&
        Objects.equals(this.properties, locationRelationship.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, kinds, hashCodeNullable(description), properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationRelationship {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    kinds: ").append(toIndentedString(kinds)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `target` to the URL query string
    if (getTarget() != null) {
      joiner.add(String.format("%starget%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTarget()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kinds` to the URL query string
    if (getKinds() != null) {
      int i = 0;
      for (String _item : getKinds()) {
        joiner.add(String.format("%skinds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(getDescription().toUrlQueryString(prefix + "description" + suffix));
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      joiner.add(String.format("%sproperties%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProperties()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

